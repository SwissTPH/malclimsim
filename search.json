[{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"climate-driven dynamical transmission model used package adaptation one constructed Ukawuba Shaman 2022 (https://doi.org/10.1371/journal.pcbi.1010161). original paper calibrated model using data provincial district levels (district-level analysis found supplement). key characteristics model humans modeled explicitly climate-mosquito dynamics incorporated addition equations relating rainfall temperature entomological innoculation rate. compartmental model 10 total compartments across two age groups, splitting population Susceptible disease, Exposed infected malaria parasites, Symptomatic Infection untreated, Treated, Asymptomatic infection. Currently, model assumes year 360 days twelve 30 day months using monthly data assumes 365 day years 7 day weeks using weekly data. two age groups modeled - 5 years old 5 years older. one intervention considered - seasonal malaria chemoprevention. vignette go process defining inputs , simulating , predefined model malaria transmission. Afterwords, number parameters model inferred using mcstate package. Lastly, diagnostics examined relevant quantities calculated.","code":"#detach(\"package:malclimsim\", unload = TRUE) install.packages(\"odin.dust\", repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) install.packages(\"mcstate\", repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) devtools::install_github(\"https://github.com/SwissTPH/malclimsim\", ref = \"master\") library(malclimsim)"},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"climate-data-downloading-and-processing","dir":"Articles","previous_headings":"Setting Up Model Inputs","what":"Climate data downloading and processing","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"first step using model specify region (latitude longitude) want model simulate . Additionally, years used analysis must specified. Next, “save_climate_data” download raw data specified coordinates directory given ‘path_to_data’, data can loaded future uses. temperature data comes ‘ERA5-Land’ (https://cds.climate.copernicus.eu/datasets/derived-era5-land-daily-statistics?tab=overview) rainfall data comes ‘CHIRTSdaily’ (https://www.chc.ucsb.edu/data/chirtsdaily). get access CHIRPS data (run function), one must register European Centre Medium-Range Weather Forecasts API - instructions found - https://bluegreen-labs.github.io/ecmwfr/. Now data processed using ‘process_climate_data’ function. things done . First, temperature data form monthly averages model requires input day, smoothing splines used fit smooth function data. function used estimate daily temperatures. things done rainfall data. First, cumulative monthly rainfall calculated. , smoothing spine fit monthly data. Afterwards, daily estimated estimated fit. Lastly, daily estimates standardized mean 0 variance 1. details, look code found “climate_processing_functions.R”.","code":"# Years used for the analysis years_clim <- 2017:2023 start_date <- ymd(\"2018-01-01\")  # Start date of the analysis end_date <- ymd(\"2023-12-31\")  # End date of the analysis years_analysis <- year(start_date) : year(end_date) # Latitude and longitude where climate data (rainfall and temperature) is to be saved # Rainfall data is from CHIRPS and temperature data is from ERA5 lat <- 8.34 lon <- 17.77 # Saving the rainfall data locally based on specified path save_climate_data(lon = lon, lat = lat, years = years_clim,                    path_to_data = path_to_data,                   rain_file_name = rain_file_name, temp_file_name = temp_file_name) # Reading in climate data saved by `save_climate_data` temp_path <- paste0(path_to_data, temp_file_name) rain_path <- paste0(path_to_data, rain_file_name)  # Processing climate data to be used in the model # `months_30_days` determines if years are 360 or 365 days - if using weekly data, 365 # days must be used and if using monthly data, 360 days must be used met_365 <- process_climate_data(lon, lat, years = years_clim, temp_path = temp_path,                             rain_path = rain_path, months_30_days = FALSE)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"seasonal-malaria-chemoprevention-data-downloading-and-processing","dir":"Articles","previous_headings":"Setting Up Model Inputs","what":"Seasonal malaria chemoprevention data downloading and processing","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"Next load SMC data, gives information round SMC given coverage round. now, functions process SMC data, format (column names) must shown . One now needs define inputs related seasonal malaria chemoprevention (SMC). three vectors needed length rainfall temperature vectors. One vector consists 1s 0s define start round SMC. second vector coverage SMC round. last vector result decay function applied coverage time. total effect SMC given time point defined product (component-wise multiplication) vectors time. go clean dataset, rounds given monthly intervals, daily intervals required model, call `smc_schedule_from_data’ function.","code":"data(smc_data_raw)  head(smc_data_raw, n = 5)  smc_data <- load_clean_smc_data(data = smc_data_raw) head(smc_data, n = 5) smc_schedule <- smc_schedule_from_data(   smc_cov = smc_data,   months_30_days = FALSE,   years = years_analysis )  head(smc_schedule, n = 200)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"ensuring-alignment-of-model-inputs","dir":"Articles","previous_headings":"Setting Up Model Inputs","what":"Ensuring alignment of model inputs","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"mentioned , necessary climate SMC inputs begin date - otherwise given day climate SMC information actually corresponding day. ensure case, helper function checks condition another trims accordingly. Furthermore, lag climate, need climate vectors data date SMC starts. following code helps ensure everything aligned.","code":"met_365 <- impute_climate_to_end_date(met_365, max(smc_schedule$dates)) # climate data only available until December 2023  # Specify lag clim_smc_lag <- 180  # Validate continuity, span, and alignment # validate_smc_climate_alignment(smc_schedule, met_365, clim_smc_lag)  # Trim & align aligned <- lag_and_trim_smc_climate(smc_schedule, met_365, clim_smc_lag) smc_schedule    <- aligned$smc met_365 <- aligned$climate  validate_smc_climate_alignment(smc_schedule, met_365, clim_smc_lag)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"simulating-from-the-malaria-model","dir":"Articles","previous_headings":"","what":"Simulating from the Malaria Model","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"One last model input population size region studied. case Chad, much uncertainty true population size also include model population scaling factor. means results sensitivity chosen population size value. Now, climate model loaded using “load_model” takes input name model. called “model_new_R_with_FOI”. principle, one adjust model add new models loaded simulated . model written ‘odin’, domain-specific language (DSL) created facilitating writing efficient state-space models. information can found original paper FitzJohn et al (10.12688/wellcomeopenres.16466.2). One last object define running model . input named list name corresponds parameter within model values can specified based prior knowledge fitting observed data. Many parameter values come paper Ukawuba Shaman model fit district-level data Rwanda. Found table information parameter (taken directly Ukawuba), well corresponding name paper Ukawuba, naming convention differs slightly parameters (still need define). inference, let’s first take look model output looks like using parameter values defined . first simulate weekly malaria cases using `data_sim’ function (function used lot behind scenes throughout fitting inference diagnostics process). Afterwards, ’ll plot weekly malaria cases given model 2018 end 2023. Note default parameter values “selected” - worth changing values seeing changes model outputs!","code":"N <- 150000 malaria_model <- load_model(\"model_new_R_with_FOI\")  # Load the deterministic climate model # Extract rainfall and temperature data rain <- met_365$anom  # Standardized rolling mean of rainfall temp <- met_365$temp  # Temperature data  # Extract key SMC schedule information SMC <- smc_schedule$SMC  # Indicator for days when an SMC round started (1s and 0s) decay <- smc_schedule$decay  # Efficacy decay of SMC over time cov <- smc_schedule$cov  # SMC coverage over time  # Define parameter inputs for the malaria model simulation param_inputs <- list(   # Rate and Demographic parameters   mu_TS = 1/30, mu_IR = 1/5, mu_RS = 1/195,   mu_EI = 1/10, delta_b = 47/(1000*365), delta_d = 47/(1000*365),   delta_a = 1/(5 * 365), N = N, percAdult = 0.81,    # Immunity and Reporting Parameters   pi_s_1 = 0.75, c_s = 0.12,   qR = 0.24,    # Immunity and Reporting Parameters   fT_C = 0.28,    # Population Scaling factor   s = 9,    # Growth rates   r_C_0 = 1.000079,   r_A_0 = 1.000108,    # Time-varying Inputs   decay = decay,   SMC = SMC,   cov_SMC = cov,   c_R_D = rain, temp = temp,    # Climate Parameters   b = 3,   R_opt = 0,   alpha = 1,   sigma_LT = 4, sigma_RT = 4,   k1 = 1.5, lag_R = 30, lag_T = 15,    # Likelihood function parameters   size_1 = 15,    # SMC parameters   eff_SMC = 0.8,    # Misc   clim_SMC_lag = clim_smc_lag ) # Run the climate-malaria model simulation results <- data_sim(   malaria_model, param_inputs = param_inputs, start_date, end_date,   month = FALSE, round = FALSE, save = FALSE, month_unequal_days = TRUE ) plot_time_series(results = results, plot_title = \"Simulated Weekly Malaria Cases (2018 to 2023)\",                  select_incidence = \"<5\", incidence_y_label = \"Weekly Malaria Cases\")"},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"loading-observed-data","dir":"Articles","previous_headings":"Model Inference","what":"Loading observed data","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"observed data needs columns named way shown . data monthly, `date_ymd’ column correspond first month year, month, day format.","code":"data(obs_cases) obs_cases <- obs_cases %>% filter(date_ymd >= start_date) head(obs_cases, n = 3)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"weighting-observed-data","dir":"Articles","previous_headings":"Model Inference","what":"Weighting observed data","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"example, SMC deployed year except 2019. means inference procedure, aims maximize posterior probability globally, naturally gives weight years SMC deployed (simply ). consequence tendency worse model predictions year SMC stopped. ultimately interested comparing scenarios SMC given, comparable performance across SMC status preferred better global predictions. Towards goal, take simple approach weight non SMC observations many times SMC observations (e.g. across dataset, SMC given 5 years given 1 year, weight observation years SMC given 1, weight 5 year SMC given).","code":"obs_cases$treatment <- ifelse(year(obs_cases$date_ymd) != 2019, 1, 0) control_weight <- mean(obs_cases$treatment) / (1 - mean(obs_cases$treatment)) obs_cases$obs_weight <- ifelse(year(obs_cases$date_ymd) == 2019, control_weight, 1)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"defining-model-parameters-to-estimate","dir":"Articles","previous_headings":"Model Inference","what":"Defining model parameters to estimate","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"# Listing the model parameters to be estimated params_to_estimate <- c(lag_R = \"lag_R\", lag_T = \"lag_T\",                         sigma_LT = \"sigma_LT\", sigma_RT = \"sigma_RT\",                         k1 = \"k1\", size_1 = \"size_1\",                         eff_SMC = \"eff_SMC\", s = \"s\",                         b = \"b\")"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"defining-parameters-of-the-random-walk-metropolis-algorithm","dir":"Articles","previous_headings":"Model Inference","what":"Defining parameters of the Random-walk Metropolis Algorithm","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"Inference done Bayesian context, meaning targeting posterior distribution parameter set given observed data, proportional likelihood prior probabilities. simulate posterior distribution using popular Markov chain Monte Carlo algorithm called ‘Random Walk Metropolis’. implemented ‘mcstate’ package - information can found original paper outlining package (Fitz et al 2021). Random-Walk Metropolis different parameters must specified prior running algorithm. start, need decide number steps run algorithm . Additionally, must decide many chains run. One also needs select chains start. Furthermore, define covariance matrix proposal distribution (proposal distribution multivariate normal). choice covariance matrix greatly impacts efficiency algorithm, especially parameters estimated complex dependency structure. Therefore, ’s important choose one carefully. Luckily, mcstate build functionality “adaptive” proposal learns optimal proposal distribution MCMC procedure (Spencer SEF 2021). details can found - https://mrc-ide.github.io/mcstate/reference/adaptive_proposal_control.html. case, inference three stages. First, start relatively uninformed proposal distribution high level adaptation. Afterwards, use first stage inform second stage update proposal distribution starting values chain. second stage less strong adaptation idea continue sort “convergence” reached. Lastly, algorithm run adaptation algorithm represents valid draws posterior distribution.","code":"params_default <- create_mcmc_params(stage = \"stage1\") adaptive_params_1 <- params_default$adaptive_params control_params_1 <- params_default$control_params control_params_1$n_steps = 500  # Defining starting values for chains start_values_1 <- create_start_values(params_to_estimate, control_params_1,                                       model = malaria_model, param_inputs = param_inputs,                                       random = TRUE, seed = NULL) # Proposal matrix proposal_matrix_1 <- create_proposal_matrix(params_to_estimate = params_to_estimate,                                             model = malaria_model, param_inputs = param_inputs)  param_names <- rownames(proposal_matrix_1)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"defining-aspects-of-the-inference-procedure-not-related-to-mcmc","dir":"Articles","previous_headings":"Model Inference","what":"Defining aspects of the inference procedure not related to MCMC","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"choose using monthly weekly data, age groups fitting , whether account population growth (currently included part fitting procedure within model .","code":"inf_config <- make_obs_config(   use_monthly = FALSE,   age_group = c(\"u5\"),   include_pop_growth = TRUE ) # Small wrapper around inf_run() + diagnostics + saving run_stage <- function(proposal_matrix, start_values, control_params,                       adaptive_params, out_dir, out_file, rerun_n = 1000,                       rerun_random = TRUE, seed = 24) {      # Infer with all the shared args baked in   results <- inf_run(model = malaria_model, param_inputs = param_inputs,                      control_params = control_params,                      params_to_estimate = params_to_estimate,                      proposal_matrix = proposal_matrix,                      adaptive_params = adaptive_params,                      start_values = start_values,                      noise = FALSE, seed = seed,                      month_unequal_days = FALSE,                      dates = c(start_date, end_date),                      synthetic = FALSE, incidence_df = obs_cases,                      save_trajectories = FALSE, rerun_n = rerun_n,                      rerun_random = rerun_random, param_priors = NULL,                      n_years_warmup = 3, obs_config = inf_config)      # Save to disk   saveRDS(results, file = paste0(out_dir, out_file))      # Return the results object   invisible(results) }"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"running-inference","dir":"Articles","previous_headings":"Model Inference","what":"Running Inference","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"mcmc_results_out_dir = \"C:/Users/putnni/Documents/git-hub-repositories/vignette-storage/malclimsim/mcmc-results/\" mcmc_stage_1 <- run_stage(proposal_matrix_1, start_values_1,            control_params = control_params_1,            adaptive_params = adaptive_params_1,           out_dir = mcmc_results_out_dir,           out_file = \"mcmc_results_stage_1.rds\") mcmc_stage_1 <- readRDS(paste0(mcmc_results_out_dir, \"mcmc_results_stage_1.rds\"))  inf_params_stage_2 <- update_inf_stage(results_obj = mcmc_stage_1,    proposal_matrix = proposal_matrix_1,    param_names = rownames(proposal_matrix_1),    S_prev = 3000, draw_n = ncol(start_values_1),    shrink = 0.95, stage = \"stage2\", n_steps = 1000)            rm(mcmc_stage_1)  mcmc_stage_2 <- run_stage(proposal_matrix = inf_params_stage_2$proposal_matrix,                            start_values = inf_params_stage_2$start_values,                            control_params = inf_params_stage_2$control_params,                            adaptive_params = inf_params_stage_2$adaptive_params,                           out_dir = mcmc_results_out_dir,                           out_file = \"mcmc_results_stage_2.rds\") mcmc_stage_2 <- readRDS(paste0(mcmc_results_out_dir, \"mcmc_results_stage_2.rds\"))   inf_params_stage_3 <- update_inf_stage(results_obj = mcmc_stage_2,    proposal_matrix = inf_params_stage_2$proposal_matrix,    param_names = rownames(proposal_matrix_1),    S_prev = 3000, draw_n = 3,    shrink = 0.8, stage = \"noadapt\", n_steps = 1000)            rm(mcmc_stage_2)  mcmc_stage_3 <- run_stage(proposal_matrix = inf_params_stage_3$proposal_matrix,                            start_values = inf_params_stage_3$start_values,                            control_params = inf_params_stage_3$control_params,                            adaptive_params = inf_params_stage_3$adaptive_params,                           out_dir = mcmc_results_out_dir,                           out_file = \"mcmc_results_stage_3.rds\")"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"inference-diagnostics","dir":"Articles","previous_headings":"","what":"Inference Diagnostics","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"mcmc_stage_3 <- readRDS(paste0(mcmc_results_out_dir, \"mcmc_results_stage_3.rds\"))"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"examining-trace-plots","dir":"Articles","previous_headings":"Inference Diagnostics","what":"Examining trace plots","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"mcmc_trace <- MCMC_diag(mcmc_stage_3, params = \"trace\")"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"gelman-rubin-test","dir":"Articles","previous_headings":"Inference Diagnostics","what":"Gelman-rubin test","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"MCMC_diag(mcmc_stage_3, params = \"gelman\")"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"correlation-between-parameters","dir":"Articles","previous_headings":"Inference Diagnostics","what":"Correlation between parameters","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"plot_corr(mcmc_stage_3)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"marginal-posterior-distributions","dir":"Articles","previous_headings":"Inference Diagnostics","what":"Marginal posterior distributions","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"","code":"# Posterior plot post_plot_fig <- post_plot(   list(mcmc_stage_3), params_to_estimate, dim_plot = c(4, 3),   show_prior = TRUE, run_labels = \"Moissala\",   title = \"Posteriors\" )  post_plot_fig"},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"sampling-from-the-posterior-distribution","dir":"Articles","previous_headings":"Assessing Model Fit","what":"Sampling from the posterior distribution","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"now plot values predicted model observed values assess well model recreating data (aka posterior predictive check). , first sample certain number parameter sets posterior distribution.","code":"# Sample posterior draws from MCMC n_samples <- 200 param_samples <- sample_mcmc_steps(mcmc_stage_3$coda_pars, n_samples)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"defining-population-growth-input","dir":"Articles","previous_headings":"Assessing Model Fit","what":"Defining population growth input","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"population growth used part inference procedure, also need include population growth comparing model observed data.","code":"# Create covariate matrix (population growth) r_df <- get_population_scaling(   n             = nrow(obs_cases),   month         = FALSE,   growth_rate_C = param_inputs$r_C_0,   growth_rate_A = param_inputs$r_A_0 )  pop_growth_df <- data.frame(   date_ymd = obs_cases$date_ymd,   r_C = r_df$r_C )  # Define transformation for SMC-adjusted incidence mu_transform_C <- function(inc_df, param_inputs) {   inc_df$inc_C * inc_df$r_C }  head(pop_growth_df)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"simulating-cases-using-the-best-parameters","dir":"Articles","previous_headings":"Assessing Model Fit","what":"Simulating cases using the best parameters","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"start extracting parameter sets maximized posterior distribution simulate weekly number cases using values","code":"# Extract MAP (max posterior) parameter set max_posterior_params <- extract_max_posterior_params(mcmc_stage_3) param_inputs_best <- update_param_list(param_inputs, max_posterior_params)   # Simulate cases using the best parameter set (deterministic, no noise) sim_best <- data_sim(   model         = malaria_model,   param_inputs  = param_inputs_best,   start_date    = start_date,   end_date      = end_date,   noise         = FALSE,   mu_transform_C = mu_transform_C,   mu_transform_A = NULL,   covariate_matrix = pop_growth_df,   month = FALSE,   save = FALSE )  sim_best_long <- tidyr::pivot_longer(sim_best, -date_ymd, names_to = \"variable\", values_to = \"value\")"},{"path":"https://swisstph.github.io/malclimsim/articles/using-malclimsim.html","id":"constructing-the-uncertainty-prediction-interval","dir":"Articles","previous_headings":"Assessing Model Fit","what":"Constructing the uncertainty (prediction) interval","title":"Using malclimsim to infer parameters of a climate-driven dynamical transmission model","text":"Now, simulate using different parameter sets sampled posterior distribution. also add observation noise coming negative binomial distribution. provides interval gives range weekly malaria cases ’d likely observe. simulations summarized plot resulting posterior predictive check.","code":"# Simulate cases using different parameter sets coming from MCMC run simulations <- run_simulations_from_samples(   model         = malaria_model,   param_inputs  = param_inputs_best,   param_samples = aram_samples,   start_date    = start_date,   end_date      = end_date,   prewarm_years = 2,   mu_transform_C = mu_transform_C,   mu_transform_A = NULL,   covariate_matrix = pop_growth_df,   noise         = TRUE,   month         = FALSE ) # Summarize the simulations ci_data <- summarize_simulation_ci(simulations, variables = \"inc_C_transformed\", ci_level = 0.95)  # Format the simulated and observed data for plotting ppc_data <- prepare_ppc_data(   ci_data = ci_data,   best_df = sim_best_long,   obs_df  = obs_cases,   sim_var = \"inc_C_transformed\",   obs_var = \"inc_C\" )  # Plot the posterior predictive check ppc_plot <- plot_ppc(   ppc_data = ppc_data,   ci_data = ci_data,   title       = \"Posterior Predictive Check\",   xlab        = \"\",   ylab        = \"Weekly Number of Cases\",   show_obs    = TRUE,   show_best   = TRUE,   show_ribbon = TRUE ) print(ppc_plot)"},{"path":"https://swisstph.github.io/malclimsim/articles/using-your-own-model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to import a model for use with malclimsim","text":"models used malclimsim package written Odin domain-specific language (DSL), described FitzJohn et al paper “Reproducible parallel inference simulation stochastic state space models using odin, dust, mcstate”, published 2021.","code":""},{"path":"https://swisstph.github.io/malclimsim/articles/using-your-own-model.html","id":"models-are-not-written-in-r-code","dir":"Articles","previous_headings":"","what":"Models are not written in R code","title":"How to import a model for use with malclimsim","text":"syntax Odin DSL often resembles R code, model stored R file, R code. One key difference model written Odin DSL necessarily describes directed acyclical graph (DAG) ordering assumed variables. practically, means lines code can written order Odin “knows” assemble lines valid DAG. Also, compared R, much limited set available functions. information can found - https://mrc-ide.github.io/odin/articles/functions.html.","code":""},{"path":"https://swisstph.github.io/malclimsim/articles/using-your-own-model.html","id":"some-models-are-already-available","dir":"Articles","previous_headings":"","what":"Some models are already available","title":"How to import a model for use with malclimsim","text":"dynamical models malaria transmission already available upon installation package. models described detail elsewhere. Models already installed can viewed using base R commands. Furthermore, code underlying models can viewed edited following way:","code":"model_path <- paste0(find.package(\"malclimsim\"), \"/models/\") list.files(model_path) utils::file.edit(paste0(model_path, \"model_new_R_with_FOI.R\"))"},{"path":"https://swisstph.github.io/malclimsim/articles/using-your-own-model.html","id":"it-is-straightforward-to-import-your-own-models","dir":"Articles","previous_headings":"","what":"It is straightforward to import your own models","title":"How to import a model for use with malclimsim","text":"First malclimsim package must loaded. , two objects must defined, one path Odin model stored .R file, another name model. Afterwards, simply call `import_model’ using two objects arguments. , model can loaded assigning output load_model(model_name) variable.","code":"library(malclimsim) # Replace this line with location to model that you want to import model_path <- \"C:/Users/putnni/Documents/models-stored-locally/test_model.R\"  # This will be the name of the model that will be called when using \"load_model\" model_name <- \"new_model\" import_model(model_path, model_name)  new_model <- load_model(model_name)"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Viewing and modifying priors","text":"vignette demonstrates use following functions managing priors malclimsim: return_default_priors() build_priors() view_priors() plot_priors() : Extract raw defaults return_default_priors(). Use build_priors() construct mcstate::pmcmc_parameter() objects (either “pure defaults” overrides). Inspect priors view_priors(). Plot plot_priors(). Override one priors passing override_priors list build_priors(). Note terminology - return_default_priors() returns raw R list lists (element initial, min, max, prior). - build_priors() takes raw list plus override_priors returns named list pmcmc_parameter objects. - view_priors() plot_priors() accept priors argument list pmcmc_parameter objects (built build_priors()).","code":""},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"building-a-minimal-example","dir":"Articles","previous_headings":"","what":"1. Building a Minimal Example","title":"Viewing and modifying priors","text":"first create completely self‐contained example: Pull raw defaults via return_default_priors(). Build param_inputs (named list initial values). Create dummy identity proposal_matrix whose rownames exactly match parameter names. Choose small subset parameters “estimate” (params_to_estimate).","code":"# 1. Get the raw default prior specifications: default_priors <- return_default_priors()  # 2. Build `param_inputs`: a named list where each element is the raw “initial” for that parameter param_inputs <- lapply(default_priors, function(x) x$initial)  # 3. Build a dummy proposal_matrix: #    - identity matrix of size = number of parameters #    - rownames (and colnames) exactly match the names of default_priors all_param_names <- names(default_priors) proposal_matrix <- diag(length(all_param_names)) rownames(proposal_matrix) <- colnames(proposal_matrix) <- all_param_names  # 4. Pick a small subset of parameters to demonstrate: params_to_estimate <- c(\"qR\", \"z\", \"eff_SMC\", \"size_1\")  # Show what we have in param_inputs and proposal_matrix: str(param_inputs[params_to_estimate], max.level = 1) str(proposal_matrix[params_to_estimate, params_to_estimate])"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"building-pure-default-priors","dir":"Articles","previous_headings":"","what":"2. Building “Pure Default” Priors","title":"Viewing and modifying priors","text":"Next, build list pmcmc_parameter objects package defaults, using build_priors(). Since supply override_priors, build_priors() : Internally call return_default_priors() get defaults. Wrap element (names params_to_estimate) mcstate::pmcmc_parameter().","code":"# Build a list of pmcmc_parameter() objects (pure defaults): default_mcmc_priors <- build_priors(   param_inputs,   proposal_matrix,   params_to_estimate,   override_priors = NULL )  # Show the names and one example element: names(default_mcmc_priors) default_mcmc_priors$z"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"viewing-default-priors","dir":"Articles","previous_headings":"","what":"3. Viewing Default Priors","title":"Viewing and modifying priors","text":"can now call view_priors() get data.frame summarizing prior’s: Name Initial value Min / Max bounds textual Description prior function (string) view_priors() expects list pmcmc_parameter objects, pass default_mcmc_priors via priors argument:","code":"priors_df <- view_priors(   param_inputs       = param_inputs,   proposal_matrix    = proposal_matrix,   params_to_estimate = params_to_estimate,   priors             = default_mcmc_priors ) priors_df"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"plotting-default-priors","dir":"Articles","previous_headings":"","what":"4. Plotting Default Priors","title":"Viewing and modifying priors","text":"Next, visualize prior support.","code":"prior_plot <- plot_priors(   param_inputs       = param_inputs,   proposal_matrix    = proposal_matrix,   params_to_estimate = params_to_estimate,   priors             = default_mcmc_priors )  print(prior_plot)"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"modifying-one-or-more-priors","dir":"Articles","previous_headings":"","what":"5. Modifying One or More Priors","title":"Viewing and modifying priors","text":"Suppose want change default two parameters: Originally: Uniform(0.01, 2). want switch Beta(40, 12) [0.01, 1]. Originally: Normal(mean = 0.24, sd = 0.5), unbounded except (min = 1e-6, max = 0.5). want force qR ∈ [0.01, 0.5] Uniform(0.01, 0.5). , build override_priors list structure return_default_priors(). call build_priors() —passing override_priors. Anything specify override_priors replace package default parameter; everything else falls back original. Notice : z now Initial = 0.5, Min = 0.01, Max = 1.0, Beta(40,12). qR now Initial = 0.1, Min = 0.01, Max = 0.5, Uniform(0.01,0.5). four parameters remain unchanged original defaults.","code":"override_priors <- list(   z = list(     initial = 0.5,     min     = 0.01,     max     = 1.0,     prior   = function(p) dbeta(p, 40, 12, log = TRUE)   ),   qR  = list(     initial = 0.1,     min     = 0.01,     max     = 0.5,     prior   = function(p) dunif(p, 0.01, 0.5, log = TRUE)   ) )  updated_mcmc_priors <- build_priors(   param_inputs,   proposal_matrix,   params_to_estimate,   override_priors = override_priors )  updated_priors_df <- view_priors(   param_inputs       = param_inputs,   proposal_matrix    = proposal_matrix,   params_to_estimate = params_to_estimate,   priors             = updated_mcmc_priors ) updated_priors_df"},{"path":"https://swisstph.github.io/malclimsim/articles/viewing-and-modifying-priors.html","id":"replotting-the-updated-priors","dir":"Articles","previous_headings":"","what":"6. Re‐Plotting the Updated Priors","title":"Viewing and modifying priors","text":"Finally, let’s re‐plot six priors can see phi qR changed shape: want integrate directly main inference pipeline (inf_run()), can pass override_priors argument :","code":"updated_plot <- plot_priors(   param_inputs       = param_inputs,   proposal_matrix    = proposal_matrix,   params_to_estimate = params_to_estimate,   priors             = updated_mcmc_priors ) print(updated_plot) res <- inf_run(   model              = my_model,   param_inputs       = param_inputs,   control_params     = control_params,   params_to_estimate = params_to_estimate,   proposal_matrix    = proposal_matrix,   adaptive_params    = adaptive_params,   start_values       = start_values,   dates              = c(\"2020-01-01\", \"2022-12-31\"),   obs_config         = obs_config,   override_priors    = override_priors )"},{"path":"https://swisstph.github.io/malclimsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Putney. Author, maintainer.","code":""},{"path":"https://swisstph.github.io/malclimsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Putney N (2025). malclimsim: Simulating Estimating Parameters Dynamical Malaria Model. R package version 0.0.0.9000, https://github.com/nputney4/malclimsim.","code":"@Manual{,   title = {malclimsim: Simulating From and Estimating Parameters of a Dynamical Malaria Model},   author = {Nicholas Putney},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/nputney4/malclimsim}, }"},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulating From and Estimating Parameters of a Dynamical Malaria Model","text":"package source code can installed GitHub using: trouble installing package way, first installing two dependencies, odin.dust mcstate, may help.","code":"devtools::install_github(\"https://github.com/SwissTPH/malclimsim\") install.packages(\"odin.dust\", repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) install.packages(\"mcstate\", repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) devtools::install_github(\"https://github.com/SwissTPH/malclimsim\")"},{"path":"https://swisstph.github.io/malclimsim/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Simulating From and Estimating Parameters of a Dynamical Malaria Model","text":"purpose package facilitate simulation calibration climate-driven model malaria transmission described : Nicholas Putney, Jessica Sayyad Hilario, Israel Ukawuba, Francesco Grandesso, Saschveen Singh, Emilie Pothin, Elkoussing Djovouna, Mahamat Saleh Issakha Diar, Clara Champagne, Anton Camacho. Modelling malaria routine surveillance data inform seasonal malaria chemoprevention strategy Moissala, Southern Chad (yet published). general methodology described paper used estimate SMC effectiveness assess different strategies geographies. Furthermore, package flexibility enough allow users change model inference procedures suit application.","code":""},{"path":"https://swisstph.github.io/malclimsim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulating From and Estimating Parameters of a Dynamical Malaria Model","text":"Tutorials showing use package located https://swisstph.github.io/malclimsim/.","code":""},{"path":"https://swisstph.github.io/malclimsim/index.html","id":"general-information","dir":"","previous_headings":"","what":"General Information","title":"Simulating From and Estimating Parameters of a Dynamical Malaria Model","text":"package heavily relies (essentially wrapper ) suite packages described : FitzJohn RG, Knock ES, Whittles LK, Perez-Guzman PN, Bhatia S, Guntoro F, Watson OJ, Whittaker C, Ferguson NM, Cori , Baguelin M, Lees JA. Reproducible parallel inference simulation stochastic state space models using odin, dust, mcstate. Wellcome Open Res. 2021 Jun 10;5:288. doi: 10.12688/wellcomeopenres.16466.2. PMID: 34761122; PMCID: PMC8552050.","code":""},{"path":"https://swisstph.github.io/malclimsim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 malclimsim authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/assess_model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Assess Model Performance — assess_model_performance","title":"Assess Model Performance — assess_model_performance","text":"function assesses performance model calculating error metrics plotting residuals.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/assess_model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assess Model Performance — assess_model_performance","text":"","code":"assess_model_performance(observed_df, simulated_df, date_column, groups)"},{"path":"https://swisstph.github.io/malclimsim/reference/assess_model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assess Model Performance — assess_model_performance","text":"observed_df Data frame containing observed data. simulated_df Data frame containing simulated data. date_column name date column data frames. groups character vector specifying groups assess (e.g., c(\"inc_A\", \"inc_C\", \"inc\")).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/assess_model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assess Model Performance — assess_model_performance","text":"list containing data frame error metrics ggplot object residual plots.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/assess_model_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assess Model Performance — assess_model_performance","text":"","code":"# Example using minimal mock data obs_cases <- data.frame(   date_ymd = as.Date(\"2022-01-01\") + 0:6,   inc_A = rpois(7, lambda = 10),   inc_C = rpois(7, lambda = 12),   inc = rpois(7, lambda = 15) )  simulated_df <- obs_cases  assess_model_performance(obs_cases, simulated_df, date_column = \"date_ymd\", groups = c(\"inc_A\", \"inc_C\", \"inc\")) #> Error in assess_model_performance(obs_cases, simulated_df, date_column = \"date_ymd\",     groups = c(\"inc_A\", \"inc_C\", \"inc\")): could not find function \"assess_model_performance\""},{"path":"https://swisstph.github.io/malclimsim/reference/build_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a list of mcstate::pmcmc_parameter() objects, starting from the return_default_priors() template and then layering on any overrides. — build_priors","title":"Build a list of mcstate::pmcmc_parameter() objects, starting from the return_default_priors() template and then layering on any overrides. — build_priors","text":"Build list mcstate::pmcmc_parameter() objects, starting return_default_priors() template layering overrides.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/build_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a list of mcstate::pmcmc_parameter() objects, starting from the return_default_priors() template and then layering on any overrides. — build_priors","text":"","code":"build_priors(   param_inputs,   proposal_matrix,   params_to_estimate,   override_priors = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/build_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a list of mcstate::pmcmc_parameter() objects, starting from the return_default_priors() template and then layering on any overrides. — build_priors","text":"param_inputs Named list initial values (know parameters actually exist). proposal_matrix Numeric matrix (rownames must match parameter names). params_to_estimate Character vector names actually want estimate. override_priors Optional named list lists: element must match structure returned return_default_priors().","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/build_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a list of mcstate::pmcmc_parameter() objects, starting from the return_default_priors() template and then layering on any overrides. — build_priors","text":"Named list mcstate::pmcmc_parameter objects parameters present param_inputs proposal_matrix.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_360_day_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","title":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","text":"function calculates difference two dates, assuming 360-day year month treated 30 days. approach commonly used financial calculations simplicity.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_360_day_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","text":"","code":"calculate_360_day_difference(date1, date2)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_360_day_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","text":"date1 start date character string Date object. date2 end date character string Date object.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_360_day_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","text":"difference days date1 date2 assuming 360-day year.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_360_day_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Day Difference Assuming a 360-Day Year — calculate_360_day_difference","text":"","code":"# Example 1: Calculate difference between two dates calculate_360_day_difference(\"2023-01-01\", \"2023-12-31\") #> [1] 360  # Example 2: Use Date class objects calculate_360_day_difference(as.Date(\"2023-01-01\"), as.Date(\"2024-01-01\")) #> [1] 360"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bias — calculate_bias","title":"Calculate Bias — calculate_bias","text":"Calculates bias, shows model tends underpredict overpredict. Positive bias means overprediction, negative bias means underprediction.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bias — calculate_bias","text":"","code":"calculate_bias(observed, simulated)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bias — calculate_bias","text":"observed numeric vector observed values. simulated numeric vector simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bias — calculate_bias","text":"bias value.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_cases_averted.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cases Averted by SMC — calculate_cases_averted","title":"Calculate Cases Averted by SMC — calculate_cases_averted","text":"function calculates number percent malaria cases averted due SMC intervention comparing simulated scenarios without SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_cases_averted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cases Averted by SMC — calculate_cases_averted","text":"","code":"calculate_cases_averted(with_smc_df, without_smc_df)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_cases_averted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cases Averted by SMC — calculate_cases_averted","text":"with_smc_df Data frame containing incidence data model simulated SMC. without_smc_df Data frame containing incidence data model simulated without SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_cases_averted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cases Averted by SMC — calculate_cases_averted","text":"list containing number cases averted percentage cases averted.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_eff_smc_confidence_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","title":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","text":"function calculates confidence intervals eff_SMC sampling MCMC results, extracting parameter sets, updating , simulating outcomes.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_eff_smc_confidence_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","text":"","code":"calculate_eff_smc_confidence_intervals(   results,   param_inputs,   model,   start_date,   end_date,   n_samples = 100 )"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_eff_smc_confidence_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","text":"results MCMC results object containing parameter samples. param_inputs list parameter values model. model model function simulate . start_date start date simulation. end_date end date simulation. n_samples number parameter sets sample MCMC results.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_eff_smc_confidence_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","text":"data frame confidence intervals eff_SMC effectiveness.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_eff_smc_confidence_intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Confidence Intervals for eff_SMC — calculate_eff_smc_confidence_intervals","text":"","code":"ci <- calculate_eff_smc_confidence_intervals(results, param_inputs, model, \"2021-01-01\", \"2021-12-31\", 100) #> Error: object 'results' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Outcome Across Matched Simulation Lists — calculate_estimate","title":"Calculate Outcome Across Matched Simulation Lists — calculate_estimate","text":"Calculate Outcome Across Matched Simulation Lists","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Outcome Across Matched Simulation Lists — calculate_estimate","text":"","code":"calculate_estimate(o1, o2, outcome_fn)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Outcome Across Matched Simulation Lists — calculate_estimate","text":"o1 List data frames (e.g., SMC). o2 List data frames (e.g., SMC). outcome_fn Function takes two data frames returns scalar outcome.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Outcome Across Matched Simulation Lists — calculate_estimate","text":"Numeric vector outcomes (e.g., effectiveness cases averted) parameter set.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_incidence_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","title":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","text":"function calculates 1st 99th quantiles simulated incidence data across multiple simulations, group (inc_A, inc_C, inc).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_incidence_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","text":"","code":"calculate_incidence_quantiles(simulations)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_incidence_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","text":"simulations list data frames, containing simulation output different parameter sets.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_incidence_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","text":"data frame containing quantiles group (inc_A, inc_C, inc) time point.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_incidence_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Quantiles for Incidence from Multiple Simulations — calculate_incidence_quantiles","text":"","code":"# Assuming `simulations` is a list of data frames with simulated incidence data incidence_quantiles <- calculate_incidence_quantiles(simulations) #> Error: object 'simulations' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mean Absolute Error (MAE) — calculate_mae","title":"Calculate Mean Absolute Error (MAE) — calculate_mae","text":"Calculates Mean Absolute Error observed simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mean Absolute Error (MAE) — calculate_mae","text":"","code":"calculate_mae(observed, simulated)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mean Absolute Error (MAE) — calculate_mae","text":"observed numeric vector observed values. simulated numeric vector simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mean Absolute Error (MAE) — calculate_mae","text":"MAE value.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mean Absolute Error (MAE) — calculate_mae","text":"","code":"mae_value <- calculate_mae(observed, simulated) #> Error: object 'observed' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mape.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","title":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","text":"Calculates Mean Absolute Percentage Error observed simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","text":"","code":"calculate_mape(observed, simulated)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","text":"observed numeric vector observed values. simulated numeric vector simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","text":"MAPE value percentage.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_mape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mean Absolute Percentage Error (MAPE) — calculate_mape","text":"","code":"mape_value <- calculate_mape(observed, simulated) #> Error: object 'observed' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_monthly_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute monthly metrics from SMC schedule — calculate_monthly_metrics","title":"Compute monthly metrics from SMC schedule — calculate_monthly_metrics","text":"Compute monthly metrics SMC schedule","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_monthly_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute monthly metrics from SMC schedule — calculate_monthly_metrics","text":"","code":"calculate_monthly_metrics(schedule, exclude_years = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_monthly_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute monthly metrics from SMC schedule — calculate_monthly_metrics","text":"schedule Data frame SMC schedule (must include dates, SMC, cov, decay) exclude_years Vector years exclude (e.g., c(2023))","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_monthly_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute monthly metrics from SMC schedule — calculate_monthly_metrics","text":"Monthly summarized schedule columns: month, SMC, cov, decay","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","title":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","text":"Calculates Root Mean Squared Error observed simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","text":"","code":"calculate_rmse(observed, simulated)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","text":"observed numeric vector observed values. simulated numeric vector simulated values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","text":"RMSE value.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Root Mean Squared Error (RMSE) — calculate_rmse","text":"","code":"rmse_value <- calculate_rmse(observed, simulated) #> Error: object 'observed' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_weekly_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weekly metrics from SMC schedule (epidemiological weeks, starting Sunday) — calculate_weekly_metrics","title":"Compute weekly metrics from SMC schedule (epidemiological weeks, starting Sunday) — calculate_weekly_metrics","text":"Compute weekly metrics SMC schedule (epidemiological weeks, starting Sunday)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_weekly_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weekly metrics from SMC schedule (epidemiological weeks, starting Sunday) — calculate_weekly_metrics","text":"","code":"calculate_weekly_metrics(schedule, exclude_years = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_weekly_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weekly metrics from SMC schedule (epidemiological weeks, starting Sunday) — calculate_weekly_metrics","text":"schedule Data frame SMC schedule (must include dates, SMC, cov, decay) exclude_years Vector years exclude (e.g., c(2023))","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calculate_weekly_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weekly metrics from SMC schedule (epidemiological weeks, starting Sunday) — calculate_weekly_metrics","text":"Weekly summarized schedule columns: week_start (Date), SMC, cov, decay","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calc_decay_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","title":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","text":"Generates vector normalized decayed SMC efficacies time series SMC applied intermittently. decay curve scaled maximum value 1.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calc_decay_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","text":"","code":"calc_decay_arr(SMC, decay_func = decay_SMC, const = -0.1806)"},{"path":"https://swisstph.github.io/malclimsim/reference/calc_decay_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","text":"SMC Numeric vector. Time series indicating presence (positive value) absence (zero) SMC time point. decay_func Function. Function defining decay curve. Default decay_SMC. const Numeric. Decay constant pass decay_func. Default -0.1806.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calc_decay_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","text":"Numeric vector length SMC, decay values normalized max 1 per SMC round.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/calc_decay_arr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Normalized SMC Decay Array Over Time — calc_decay_arr","text":"","code":"smc_series <- c(0, 1, 0, 0, 0, 1, 0, 0) calc_decay_arr(smc_series) #> [1] 0.0000000 1.0000000 0.9994881 0.9988755 0.9981426 1.0000000 0.9994881 #> [8] 0.9988755"},{"path":"https://swisstph.github.io/malclimsim/reference/climate_to_30_day_months.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","title":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","text":"function converts climate data 360-day calendar, month forced 30 days. Data either removed repeated ensure adjustment, useful simplifying climate simulations.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/climate_to_30_day_months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","text":"","code":"climate_to_30_day_months(clim_df, start_year = 2014, end_year = 2022)"},{"path":"https://swisstph.github.io/malclimsim/reference/climate_to_30_day_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","text":"clim_df data frame climate data, must include columns date, month, day, anom, temp, rollrain. start_year starting year conversion (default 2014). end_year ending year conversion (default 2022).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/climate_to_30_day_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","text":"data frame 360-day years, month exactly 30 days.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/climate_to_30_day_months.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Climate Data to 360-Day Years — climate_to_30_day_months","text":"","code":"climate_to_30_day_months(clim_df, start_year = 2014, end_year = 2022) #> Error: object 'clim_df' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/compartments_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","title":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","text":"function simulates compartments epidemiological model specified time period, including optional prewarm period allow model reach equilibrium main simulation period.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compartments_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","text":"","code":"compartments_sim(   model,   param_inputs,   start_date,   end_date,   prewarm_years = 2,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/compartments_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","text":"model epidemiological model object used simulation. param_inputs named list vector model parameters used simulation. start_date character string Date object specifying start date main simulation (e.g., \"2014-01-01\"). end_date character string Date object specifying end date simulation (e.g., \"2022-12-31\"). prewarm_years Integer specifying number years prewarm model main simulation (default: 2). days_per_year Integer specifying number days model year (default: 360).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compartments_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","text":"data frame containing simulated values compartment (SC, EC, IC, etc.) simulation period weekly time resolution.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compartments_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Compartments Over Time with Prewarm Period — compartments_sim","text":"function simulates dynamics susceptible, exposed, infected, treated, recovered compartments children adults. first runs prewarm period (specified) allow model stabilize, simulating main study period. results aggregated weekly intervals.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compute_climate_lead_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute how many days Climate must lead SMC — compute_climate_lead_days","title":"Compute how many days Climate must lead SMC — compute_climate_lead_days","text":"Given SMC Climate data.frames (Date column dates), returns integer number days Climate series must start earlier SMC series start.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compute_climate_lead_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute how many days Climate must lead SMC — compute_climate_lead_days","text":"","code":"compute_climate_lead_days(smc_df, clim_df)"},{"path":"https://swisstph.github.io/malclimsim/reference/compute_climate_lead_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute how many days Climate must lead SMC — compute_climate_lead_days","text":"smc_df Data.frame Date column dates. clim_df Data.frame Date column dates.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/compute_climate_lead_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute how many days Climate must lead SMC — compute_climate_lead_days","text":"Integer ≥ 0: days Climate must precede SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_mcmc_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Adaptive Proposal and MCMC Control Parameters — create_mcmc_params","title":"Create Adaptive Proposal and MCMC Control Parameters — create_mcmc_params","text":"function defines default values adaptive proposal control parameters MCMC control parameters, allowing users specify custom values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_mcmc_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Adaptive Proposal and MCMC Control Parameters — create_mcmc_params","text":"","code":"create_mcmc_params(   stage = \"stage1\",   initial_vcv_weight = 1,   initial_scaling = 2,   initial_scaling_weight = NULL,   min_scaling = 0.1,   scaling_increment = NULL,   log_scaling_update = TRUE,   acceptance_target = 0.234,   forget_rate = 0.6,   forget_end = Inf,   adapt_end = Inf,   pre_diminish = 40000,   n_steps = 10000,   n_burnin = 0,   n_chains = 4,   n_workers = 4,   n_threads_total = 8 )"},{"path":"https://swisstph.github.io/malclimsim/reference/create_mcmc_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Adaptive Proposal and MCMC Control Parameters — create_mcmc_params","text":"stage possible values \"NULL\", stage1\", \"stage2\", \"noadapt\" initial_vcv_weight Weight initial variance-covariance matrix (default = 1). initial_scaling Scaling factor proposal (default = 2). initial_scaling_weight Optional weight initial scaling (default = NULL). min_scaling Minimum scaling factor proposal (default = 0.1). scaling_increment Increment scaling factor (default = NULL). log_scaling_update Logical, scaling updated log scale? (default = TRUE). acceptance_target target acceptance rate proposal (default = 0.234). forget_rate Rate proposal forgets past history (default = 0.6). forget_end Time step forgetting stops (default = Inf). adapt_end Time step adaptation stops (default = Inf). pre_diminish Time steps diminishing starts (default = 40000). n_steps Total number MCMC steps (default = 10000). n_burnin Number burn-steps (default = 0). n_chains Number MCMC chains (default = 4). n_workers Number workers parallel execution (default = 4). n_threads_total Total number threads parallel execution (default = 8).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_mcmc_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Adaptive Proposal and MCMC Control Parameters — create_mcmc_params","text":"list containing adaptive proposal parameters MCMC control parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_proposal_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Proposal Matrix — create_proposal_matrix","title":"Create a Proposal Matrix — create_proposal_matrix","text":"function generates proposal matrix use MCMC methods, parameter proposal variance.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_proposal_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Proposal Matrix — create_proposal_matrix","text":"","code":"create_proposal_matrix(   params_to_estimate,   proposal_variance = NULL,   correlation_matrix = NULL,   model,   param_inputs )"},{"path":"https://swisstph.github.io/malclimsim/reference/create_proposal_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Proposal Matrix — create_proposal_matrix","text":"params_to_estimate character vector parameter names estimate. proposal_variance named list containing variance parameter. NULL, default values used. model model object param() method returns parameter names. param_inputs list parameter values passed initialize model, used extract parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_proposal_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Proposal Matrix — create_proposal_matrix","text":"square matrix dimensions equal number parameters, diagonal elements corresponding proposal variances parameter.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_start_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Starting Values for Parameters — create_start_values","title":"Create Starting Values for Parameters — create_start_values","text":"function generates starting values parameters based specified method. can either draw random values uniform distribution assign values specified interval.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_start_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Starting Values for Parameters — create_start_values","text":"","code":"create_start_values(   params_to_estimate,   control_params,   min_max_start_values = NULL,   random = TRUE,   seed = 10,   model,   param_inputs )"},{"path":"https://swisstph.github.io/malclimsim/reference/create_start_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Starting Values for Parameters — create_start_values","text":"params_to_estimate character vector parameter names estimated. control_params list control parameters (must include n_chains specify number chains). min_max_start_values named list minimum maximum start values parameter. random logical value. TRUE, random values drawn uniform distribution; FALSE, values evenly spaced lower upper bounds. seed integer specifying seed random number generation (default 10). model model object param() method returns parameter names. param_inputs list parameter values passed initialize model, used extract parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/create_start_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Starting Values for Parameters — create_start_values","text":"matrix starting values parameter chain.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Daily Rainfall Data — daily_smooth_rain","title":"Smooth Daily Rainfall Data — daily_smooth_rain","text":"function uses smoothing spline interpolate daily cumulative rainfall data dataset containing weekly monthly cumulative rainfall values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Daily Rainfall Data — daily_smooth_rain","text":"","code":"daily_smooth_rain(cum_rain)"},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_rain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Daily Rainfall Data — daily_smooth_rain","text":"cum_rain data frame two columns: period column representing time period (e.g., week month), convertible numeric. cumulative_rainfall column representing cumulative rainfall period.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_rain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Daily Rainfall Data — daily_smooth_rain","text":"data frame two columns: Date column daily dates, interpolated original period. CumulativeRainfall column smoothed daily cumulative rainfall values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_rain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth Daily Rainfall Data — daily_smooth_rain","text":"","code":"# Example dataset with weekly cumulative rainfall cum_rain <- data.frame(   period = seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"), by = \"week\"),   cumulative_rainfall = cumsum(runif(52, min = 0, max = 20)) ) #> Error in data.frame(period = seq(as.Date(\"2023-01-01\"), as.Date(\"2023-12-31\"),     by = \"week\"), cumulative_rainfall = cumsum(runif(52, min = 0,     max = 20))): arguments imply differing number of rows: 53, 52  # Smooth to daily cumulative rainfall daily_rain <- daily_smooth_rain(cum_rain) #> Error: object 'cum_rain' not found  # Plot the results library(ggplot2) ggplot(daily_rain, aes(x = Date, y = CumulativeRainfall)) +   geom_line(color = \"blue\") +   labs(title = \"Daily Smoothed Cumulative Rainfall\",        x = \"Date\", y = \"Cumulative Rainfall\") +   theme_minimal() #> Error: object 'daily_rain' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Smoothed Temperature Function — daily_smooth_temp","title":"Daily Smoothed Temperature Function — daily_smooth_temp","text":"function takes data frame monthly temperature data produces daily smoothed temperature series using smoothing spline. resulting data frame includes predicted temperatures every day range earliest latest date original data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Smoothed Temperature Function — daily_smooth_temp","text":"","code":"daily_smooth_temp(temp_df)"},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daily Smoothed Temperature Function — daily_smooth_temp","text":"temp_df data frame containing two columns: Date character numeric column representing year month (e.g., \"2024-11\"). Temperature numeric column representing temperature corresponding month.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daily Smoothed Temperature Function — daily_smooth_temp","text":"data frame two columns: Date Date column representing daily dates. Temperature numeric column smoothed daily temperature predictions.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/daily_smooth_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Daily Smoothed Temperature Function — daily_smooth_temp","text":"","code":"# Example usage: temp_data <- data.frame(   Date = c(\"2024-01\", \"2024-02\", \"2024-03\"),   Temperature = c(30.5, 28.0, 25.3) ) daily_smooth_temp(temp_data) #> Error in smooth.spline(x = temp_df$Date_numeric, y = temp_df$Temperature): need at least four unique 'x' values"},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","title":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","text":"Runs deterministic dust model simulation optional pre‑warm period, aggregates returns incidence (optional transformed incidence) either monthly weekly resolution.  Weekly output may use 360‑day 365‑day year prewarm simulation period.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","text":"","code":"data_sim(   model,   param_inputs,   start_date,   end_date,   prewarm_years = 2,   month = FALSE,   round = TRUE,   save = TRUE,   file = \"\",   month_unequal_days = FALSE,   return_EIR = FALSE,   return_compartments = FALSE,   mu_transform_A = NULL,   mu_transform_C = NULL,   covariate_matrix = NULL,   noise = FALSE,   size = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","text":"model dust model object (returned load_model) simulate. param_inputs Named list model parameters, including time‑varying vectors (e.g. temp, c_R_D, cov_SMC). start_date Character Date giving first day analysis. end_date Character Date giving last day analysis. prewarm_years Integer number years (360‑ 365‑day) run start_date warm‑. month Logical; TRUE, returns monthly aggregates (30‑day unequal month lengths month_unequal_days = TRUE); FALSE, returns weekly aggregates. round Logical; TRUE, round incidence counts integers. save Logical; TRUE, save returned data frame disk RDS file. file Character; path/filename use saving (save = TRUE). month_unequal_days Logical; month = TRUE, TRUE use actual month boundaries param_inputs\\$day_count, otherwise use fixed 30‑day months. return_EIR Logical; TRUE, include monthly EIR values. return_compartments Logical; currently unused. mu_transform_A Optional function transform adult incidence simulation.  accept (inc_df, param_inputs) return vector. mu_transform_C Optional function transform child incidence simulation.  accept (inc_df, param_inputs) return vector. covariate_matrix Optional data frame external covariates (must date column name/location date_ymd output); joined date_ymd. noise Logical; TRUE, add negative‑binomial noise weekly monthly incidence draw, using size dispersion. size Optional numeric; dispersion parameter negative‑binomial noise.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","text":"data frame columns: date_ymd Date week (Sunday) month (start day). week_no, month_no Index period, starting 0. inc_A, inc_C, inc Adult, child, total incidence. EIR_monthly Monthly EIR, return_EIR = TRUE. inc_A_transformed, inc_C_transformed Transformed incidence, mu_transform_A mu_transform_C supplied. plus merged covariates covariate_matrix.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Incidence Data Over Time (Monthly or Weekly) — data_sim","text":"","code":"if (FALSE) { # \\dontrun{ sim_df <- data_sim(   model             = model_1,   param_inputs      = param_inputs_wk,   start_date        = \"2018-01-01\",   end_date          = \"2023-12-31\",   prewarm_years     = 5,   month             = FALSE,   round             = FALSE,   save              = FALSE,   mu_transform_C    = mu_transform_C_wk,   covariate_matrix  = covariate_matrix_wk,   noise             = TRUE,   size              = 10,   year_360_days     = FALSE ) } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Data for Inference — data_sim_for_inference","title":"Simulate Data for Inference — data_sim_for_inference","text":"function generates simulated dataset inference, based specified model parameters. can include optional features monthly aggregation, unequal days months, adding noise simulated data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Data for Inference — data_sim_for_inference","text":"","code":"data_sim_for_inference(   model,   param_inputs,   dates,   noise = FALSE,   month = FALSE,   month_unequal_days = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Data for Inference — data_sim_for_inference","text":"model model use simulation. valid model object data_sim can process. param_inputs list vector parameters required model simulation. dates vector two dates (start_date end_date) specifying time range simulation. noise Logical. TRUE, random noise added simulated incidence data using negative binomial distribution. month Logical. TRUE, incidence data aggregated month. Defaults FALSE. month_unequal_days Logical. TRUE, function accounts months unequal days simulation. Defaults FALSE.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Data for Inference — data_sim_for_inference","text":"data frame containing simulated incidence data, formatted according output data_sim. noise enabled, inc column include added noise.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Data for Inference — data_sim_for_inference","text":"month = TRUE, simulation aggregates incidence month, month_unequal_days parameter can control whether adjust months different numbers days. noise = TRUE, negative binomial distribution used add random noise incidence values. size parameter negative binomial distribution fixed 100.","code":""},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/reference/data_sim_for_inference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Data for Inference — data_sim_for_inference","text":"","code":"# Example usage model <- some_model_object #> Error: object 'some_model_object' not found param_inputs <- list(beta = 0.3, gamma = 0.1) dates <- c(\"2022-01-01\", \"2022-12-31\")  # Simulate data with no noise, not aggregated by month sim_data <- data_sim_for_inference(model, param_inputs, dates, noise = FALSE, month = FALSE) #> Error: object 'model' not found  # Simulate data with noise, aggregated by month sim_data_with_noise <- data_sim_for_inference(model, param_inputs, dates, noise = TRUE, month = TRUE) #> Error: object 'model' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_months.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Date Range to Monthly Format — date_to_months","title":"Convert Date Range to Monthly Format — date_to_months","text":"function takes start date end date, converts range vector first day month range, formatted \"YYYY-MM\".","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Date Range to Monthly Format — date_to_months","text":"","code":"date_to_months(start_date, end_date)"},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Date Range to Monthly Format — date_to_months","text":"start_date start date character string Date object. end_date end date character string Date object.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Date Range to Monthly Format — date_to_months","text":"vector Date objects representing first day month within given date range.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_months.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Date Range to Monthly Format — date_to_months","text":"","code":"date_to_months(\"2022-01-01\", \"2022-06-01\") #> [1] \"2022-01-01\" \"2022-02-01\" \"2022-03-01\" \"2022-04-01\" \"2022-05-01\" #> [6] \"2022-06-01\""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","title":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","text":"function takes start date end date, returns vector Dates representing Sunday week range.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","text":"","code":"date_to_weeks(start_date, end_date)"},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","text":"start_date start date character string Date object. end_date end date character string Date object.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","text":"vector Date objects representing Sunday dates.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Date Range to Weekly Format (Sundays) — date_to_weeks","text":"","code":"date_to_weeks(\"2022-01-01\", \"2022-03-01\") #>  [1] \"2021-12-26\" \"2022-01-02\" \"2022-01-09\" \"2022-01-16\" \"2022-01-23\" #>  [6] \"2022-01-30\" \"2022-02-06\" \"2022-02-13\" \"2022-02-20\" \"2022-02-27\""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks_360.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate weekly model dates (by 7-day blocks) in 360‑day calendar — date_to_weeks_360","title":"Generate weekly model dates (by 7-day blocks) in 360‑day calendar — date_to_weeks_360","text":"Generate weekly model dates (7-day blocks) 360‑day calendar","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks_360.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate weekly model dates (by 7-day blocks) in 360‑day calendar — date_to_weeks_360","text":"","code":"date_to_weeks_360(start_year, n_days)"},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks_360.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate weekly model dates (by 7-day blocks) in 360‑day calendar — date_to_weeks_360","text":"start_year integer, year day 1 n_days integer, total days (must divisible 7)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/date_to_weeks_360.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate weekly model dates (by 7-day blocks) in 360‑day calendar — date_to_weeks_360","text":"data.frame one row per week: year, month, day (numeric)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/decay_SMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute SMC Efficacy Decay Over Time — decay_SMC","title":"Compute SMC Efficacy Decay Over Time — decay_SMC","text":"Models decay Seasonal Malaria Chemoprevention (SMC) efficacy sigmoid function time since last administration.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/decay_SMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute SMC Efficacy Decay Over Time — decay_SMC","text":"","code":"decay_SMC(x, const = -0.1806)"},{"path":"https://swisstph.github.io/malclimsim/reference/decay_SMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute SMC Efficacy Decay Over Time — decay_SMC","text":"x Numeric. Number days since last SMC treatment. const Numeric. decay constant controls steepness sigmoid curve. Default -0.1806.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/decay_SMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute SMC Efficacy Decay Over Time — decay_SMC","text":"Numeric. Remaining efficacy SMC treatment day x.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/decay_SMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute SMC Efficacy Decay Over Time — decay_SMC","text":"","code":"decay_SMC(0)      # Should return near maximum efficacy #> [1] 0.897671 decay_SMC(60)     # Should return reduced efficacy #> [1] 0.006774873"},{"path":"https://swisstph.github.io/malclimsim/reference/define_mcmc_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Define MCMC Control Settings — define_mcmc_control","title":"Define MCMC Control Settings — define_mcmc_control","text":"Creates two sets MCMC control objects use mcstate::pmcmc, one short run adaptation, one main run full settings.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/define_mcmc_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define MCMC Control Settings — define_mcmc_control","text":"","code":"define_mcmc_control(   control_params,   adaptive_params,   save_trajectories,   rerun_n,   rerun_random )"},{"path":"https://swisstph.github.io/malclimsim/reference/define_mcmc_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define MCMC Control Settings — define_mcmc_control","text":"control_params list MCMC control settings including n_steps, n_burnin, n_chains, n_workers, n_threads_total. adaptive_params list object specifying adaptive proposal settings (e.g., mcstate::adaptive_proposal()). save_trajectories Logical; whether save state trajectories MCMC run. rerun_n Integer; frequency rerunning adaptive proposal fitting. rerun_random Logical; whether rerun intervals randomized.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/define_mcmc_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define MCMC Control Settings — define_mcmc_control","text":"list two elements: control1 initial short pmcmc_control object (e.g., proposal adaptation). control2 full pmcmc_control object used main MCMC run.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/define_transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Transformation Function for MCMC Simulation — define_transformations","title":"Define Transformation Function for MCMC Simulation — define_transformations","text":"Wraps construction transformation function model covariates (e.g., temperature, SMC coverage).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/define_transformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Transformation Function for MCMC Simulation — define_transformations","text":"","code":"define_transformations(temp, c_R_D, SMC, decay, cov_SMC)"},{"path":"https://swisstph.github.io/malclimsim/reference/define_transformations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Transformation Function for MCMC Simulation — define_transformations","text":"temp Numeric vector matrix temperature values. c_R_D Numeric vector representing case reduction treatment diagnostics. SMC Numeric vector SMC coverage. decay Numeric vector SMC efficacy decay time. cov_SMC Numeric vector SMC target coverage.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/define_transformations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Transformation Function for MCMC Simulation — define_transformations","text":"transformation function compatible mcstate model input.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/evaluate_multiple_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Multiple SMC Scenarios — evaluate_multiple_scenarios","title":"Evaluate Multiple SMC Scenarios — evaluate_multiple_scenarios","text":"Runs model simulations list SMC coverage patterns summarizes outcomes.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/evaluate_multiple_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Multiple SMC Scenarios — evaluate_multiple_scenarios","text":"","code":"evaluate_multiple_scenarios(   patterns,   smc_day_of_month = 1,   model,   param_inputs,   param_samples,   start_date,   end_date,   avg_cov,   years,   exclude_years = 2023,   mu_transform_C = NULL,   mu_transform_A = NULL,   outcome_fn = function(y1, y0) sum(y1$inc_C_transformed),   o1 = NULL,   ci_level = 0.95,   out_dir = NULL,   month = FALSE,   apply_decay = TRUE,   use_SMC_as_covariate = FALSE,   noise = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/evaluate_multiple_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Multiple SMC Scenarios — evaluate_multiple_scenarios","text":"patterns named list 12-element binary vectors representing monthly SMC coverage patterns. smc_day_of_month Day month simulated SMC coverage start (default = 1). model compiled model object used simulations. param_inputs named list baseline parameter values. param_samples matrix sampled parameter sets (rows = samples). start_date Start date simulation. end_date End date simulation. avg_cov Average SMC coverage apply active months. years vector years apply SMC coverage. exclude_years Years exclude summarizing coverage (default = 2023). mu_transform_C Optional transformation function mu_C. mu_transform_A Optional transformation function mu_A. outcome_fn function defining outcome summarize (default: total cases). o1 Baseline simulations comparison. ci_level Confidence level credible intervals (default = 0.95). out_dir Directory save plots (optional). month Logical. Whether summarize simulate using weekly data. Default FALSE. apply_decay Logical. Whether apply decay SMC coverage. Default TRUE. use_SMC_as_covariate Logical. Whether SMC included model covariate observation model.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/evaluate_multiple_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Multiple SMC Scenarios — evaluate_multiple_scenarios","text":"list three elements: outputs named list lists estimates, plots, summaries scenario. summaries named list time series summaries scenario. estimates named list scalar outcome estimates scenario.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/export_param_table_tex.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Estimated and Fixed Parameters to LaTeX — export_param_table_tex","title":"Export Estimated and Fixed Parameters to LaTeX — export_param_table_tex","text":"Extracts posterior summaries estimated parameters writes estimated fixed parameters LaTeX tables.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/export_param_table_tex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Estimated and Fixed Parameters to LaTeX — export_param_table_tex","text":"","code":"export_param_table_tex(   results,   params_to_estimate,   out_dir,   suffix = NULL,   sigfig = 3 )"},{"path":"https://swisstph.github.io/malclimsim/reference/export_param_table_tex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Estimated and Fixed Parameters to LaTeX — export_param_table_tex","text":"results list containing inference results coda_pars param_inputs. params_to_estimate Character vector parameter names inferred. out_dir Directory save LaTeX files. suffix Optional suffix append filenames (e.g., dataset name). sigfig Number significant figures use (default = 3).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/export_param_table_tex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Estimated and Fixed Parameters to LaTeX — export_param_table_tex","text":"return value; writes LaTeX tables disk.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_inputs_with_prewarm.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend Prewarm Climate to Your True Analysis Series — extend_inputs_with_prewarm","title":"Prepend Prewarm Climate to Your True Analysis Series — extend_inputs_with_prewarm","text":"Takes genuine, day‑1–‑day‑N climate vectors (temp, rain, etc.) builds single vector length prewarm_years360 + analysis_days, first prewarm_years360 days just repeats first 360 days real series, last analysis_days days real data passed .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_inputs_with_prewarm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend Prewarm Climate to Your True Analysis Series — extend_inputs_with_prewarm","text":"","code":"extend_inputs_with_prewarm(   param_inputs,   start_date,   end_date,   prewarm_years,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/extend_inputs_with_prewarm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend Prewarm Climate to Your True Analysis Series — extend_inputs_with_prewarm","text":"param_inputs Named list inputs, time‑varying elements include \"cov_SMC\", \"SMC\", \"decay\", \"c_R_D\", \"temp\". numeric vector length = raw_analysis_days. start_date Date real series begins (e.g. \"2018-01-01\"). end_date Date real series ends   (e.g. \"2023-12-31\"). prewarm_years Integer number 360‑day years prepend. days_per_year Number days per model year (default: 360).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_inputs_with_prewarm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend Prewarm Climate to Your True Analysis Series — extend_inputs_with_prewarm","text":"list like param_inputs time‑varying vector extended length = prewarm_years*360 + floor(analysis_days/7)*7.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"function extends selected time-varying inputs repeating first year's data backwards specified number years. useful simulating models require initialization extended period.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"","code":"extend_time_varying_inputs(   param_inputs,   days_per_year = 360,   years_to_extend = 2 )"},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"param_inputs named list model input vectors, elements may time-varying (e.g., daily values). days_per_year Integer specifying number time steps (e.g., days) per year. Defaults 360. years_to_extend Number years prepend time-varying input repeating first year's data. Defaults 2.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"list structure param_inputs, selected time-varying inputs extended backward time.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"following keys treated time-varying extended: \"cov_SMC\", \"SMC\", \"decay\", \"c_R_D\", \"temp\". keys left unchanged.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend Time-Varying Inputs Backwards in Time — extend_time_varying_inputs","text":"","code":"inputs <- list(   cov_SMC = rep(0.5, 360 * 3),   temp = rep(25, 360 * 3),   constant = 42 ) extended <- extend_time_varying_inputs(inputs, days_per_year = 360, years_to_extend = 1) length(extended$cov_SMC)  # should be 360 * 4 #> [1] 1440"},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"Ensures relevant time-varying parameters (e.g., temperature, SMC coverage) extended match required number simulation days prepending repeated values first year data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"","code":"extend_time_varying_inputs_to_length(   param_inputs,   days_needed,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"param_inputs named list model input vectors. entries time-varying inputs. days_needed Integer specifying total number days required simulation (e.g., n_days). days_per_year Integer number days per model year (default 360).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"list parameter inputs time-varying entries extended (trimmed) exactly days_needed days.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"following keys treated time-varying: \"cov_SMC\", \"SMC\", \"decay\", \"c_R_D\", \"temp\". extended repeatedly prepending first year values total length sufficient. Non-time-varying keys returned unchanged.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extend_time_varying_inputs_to_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend Time-Varying Inputs to Match Simulation Duration — extend_time_varying_inputs_to_length","text":"","code":"inputs <- list(temp = rep(25, 360), constant = 0.1) extended <- extend_time_varying_inputs_to_length(inputs, days_needed = 720) length(extended$temp)  # should be 720 #> [1] 720"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_era5.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Temperature Data from ERA5 File — extract_era5","title":"Extract Temperature Data from ERA5 File — extract_era5","text":"Extracts temperature data specified longitude latitude NetCDF ERA5 file.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_era5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Temperature Data from ERA5 File — extract_era5","text":"","code":"extract_era5(lon, lat, path_to_file)"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_era5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Temperature Data from ERA5 File — extract_era5","text":"lon numeric value specifying longitude location. lat numeric value specifying latitude location. path_to_file string specifying path NetCDF file containing ERA5 data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_era5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Temperature Data from ERA5 File — extract_era5","text":"dataframe containing two columns: Date (POSIXct) Temperature (Celsius).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_era5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Temperature Data from ERA5 File — extract_era5","text":"","code":"if (FALSE) { # \\dontrun{ extract_era5(lon = 10.5, lat = -25.3, path_to_file = \"./data/era5_011220.nc\") } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_max_posterior_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","title":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","text":"function finds extracts parameter set corresponding maximum log posterior value MCMC results.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_max_posterior_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","text":"","code":"extract_max_posterior_params(results)"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_max_posterior_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","text":"results MCMC results object containing parameter samples.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_max_posterior_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","text":"named vector parameter values corresponding maximum log posterior.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_max_posterior_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parameters with Maximum Log Posterior — extract_max_posterior_params","text":"","code":"# Assuming `results` contains the MCMC output max_posterior_params <- extract_max_posterior_params(results) #> Error: object 'results' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_vcv.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","title":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","text":"function extracts variance-covariance matrix restart values results MCMC run. can save computed proposal matrix start values specified file paths.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_vcv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","text":"","code":"extract_vcv(   results,   S_prev,   save = TRUE,   param_names,   file_proposal = \"\",   file_start = \"\" )"},{"path":"https://swisstph.github.io/malclimsim/reference/extract_vcv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","text":"results list: Results inf_run function containing MCMC parameters chain identifiers. S_prev numeric: Number previous steps MCMC chains include calculation. save boolean: Whether save computed results files (default: TRUE). param_names list: List model parameter names, used labeling proposal matrix. file_proposal character: File path save proposal covariance matrix (save = TRUE). file_start character: File path save start values (save = TRUE).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_vcv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","text":"list containing: start_values matrix restart values (medians selected MCMC steps) parameter. proposal_matrix variance-covariance matrix use proposal distribution.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/extract_vcv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Variance-Covariance Matrix and Restart Values — extract_vcv","text":"","code":"# Example usage: results <- list(   mcmc_run = list(     pars = matrix(runif(1000), ncol = 10),     chain = rep(1:5, each = 200)   ) ) param_names <- paste0(\"param_\", 1:10) S_prev <- 100 file_proposal <- \"proposal_matrix.rds\" file_start <- \"start_values.rds\"  output <- extract_vcv(   results = results,   S_prev = S_prev,   save = FALSE,   param_names = param_names,   file_proposal = file_proposal,   file_start = file_start ) #> Error in mcmc_pars[chain_subset, ]: subscript out of bounds  print(output) #> Error: object 'output' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_by_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a dataset by a range of years — filter_by_year","title":"Filter a dataset by a range of years — filter_by_year","text":"function filters dataset include rows year extracted specified date column falls within given range years. date column format \"YYYY-MM-DD\" string.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_by_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a dataset by a range of years — filter_by_year","text":"","code":"filter_by_year(data, date_column, years_range)"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_by_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a dataset by a range of years — filter_by_year","text":"data data frame containing dataset filter. date_column string specifying name column contains dates strings. years_range numeric vector specifying range years include filtered dataset.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_by_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a dataset by a range of years — filter_by_year","text":"filtered data frame containing rows within specified year range.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_by_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a dataset by a range of years — filter_by_year","text":"","code":"# Example dataset met_360 <- data.frame(   date = c(\"2012-01-01\", \"2015-06-15\", \"2020-03-22\"),   temp = c(26.3, 27.5, 28.1) )  # Filter data for the years 2014 to 2023 years_analysis <- 2014:2023 met_360_filtered <- filter_by_year(met_360, \"date\", years_analysis)"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Relate Time Steps to Observed Data for mcstate — filter_data","title":"Relate Time Steps to Observed Data for mcstate — filter_data","text":"function formats observed data form usable mcstate particle filter, adjusting time steps (weeks months) ensuring data correct format particle filtering.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relate Time Steps to Observed Data for mcstate — filter_data","text":"","code":"filter_data(incidence_observed, month = FALSE, initial_time_obs = 0, rate = 7)"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relate Time Steps to Observed Data for mcstate — filter_data","text":"incidence_observed data frame containing observed incidence data (cumulative incidence types observations). month logical value indicating whether data provided monthly intervals (TRUE) weekly intervals (FALSE). initial_time_obs integer specifying initial time step monthly data (defaults 0 weekly data). rate integer specifying rate (e.g., 7 weekly data, 30 monthly data) resampling time steps.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relate Time Steps to Observed Data for mcstate — filter_data","text":"data frame filtered data, including time intervals appropriate columns particle filtering.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relate Time Steps to Observed Data for mcstate — filter_data","text":"","code":"# Assuming 'incidence_observed' is a data frame with your observed data formatted_data <- relate_time_steps_to_observed_data(incidence_observed, month = FALSE, initial_time_obs = 0, rate = 7) #> Error in relate_time_steps_to_observed_data(incidence_observed, month = FALSE,     initial_time_obs = 0, rate = 7): could not find function \"relate_time_steps_to_observed_data\""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Filtered Data for Likelihood Evaluation — filter_data_setup","title":"Set Up Filtered Data for Likelihood Evaluation — filter_data_setup","text":"Prepares observed incidence data comparison simulated data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Filtered Data for Likelihood Evaluation — filter_data_setup","text":"","code":"filter_data_setup(incidence_observed, month, initial_time_obs)"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Filtered Data for Likelihood Evaluation — filter_data_setup","text":"incidence_observed data frame observed incidence values. month Logical; whether data aggregated month. initial_time_obs Integer; starting time index aligning simulated observed data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_data_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Filtered Data for Likelihood Evaluation — filter_data_setup","text":"filtered data object suitable use likelihood comparison.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_incidence_by_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Incidence Data by Date Range — filter_incidence_by_dates","title":"Filter Incidence Data by Date Range — filter_incidence_by_dates","text":"Filters time series incidence data include rows within specified date range.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_incidence_by_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Incidence Data by Date Range — filter_incidence_by_dates","text":"","code":"filter_incidence_by_dates(incidence_df, dates)"},{"path":"https://swisstph.github.io/malclimsim/reference/filter_incidence_by_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Incidence Data by Date Range — filter_incidence_by_dates","text":"incidence_df data frame date_ymd column (must coercible Date). dates vector two dates (start end) Date objects strings \"YYYY-MM-DD\" format.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_incidence_by_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Incidence Data by Date Range — filter_incidence_by_dates","text":"filtered data frame containing rows date_ymd within specified range.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/filter_incidence_by_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Incidence Data by Date Range — filter_incidence_by_dates","text":"","code":"df <- data.frame(date_ymd = seq.Date(as.Date(\"2020-01-01\"), by = \"day\", length.out = 100),                  incidence = rpois(100, 5)) filtered <- filter_incidence_by_dates(df, c(\"2020-01-10\", \"2020-01-20\"))"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_360_day_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","title":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","text":"function generates sequence dates assuming 360-day year, month consisting 30 days. Useful simplified models leap years 31-day months ignored.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_360_day_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","text":"","code":"generate_360_day_dates(start_year, end_year)"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_360_day_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","text":"start_year starting year date sequence. end_year ending year date sequence.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_360_day_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","text":"vector dates formatted \"YYYY-MM-DD\" day within given range, assuming 360-day year.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_360_day_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Dates for a 360-Day Year Calendar — generate_360_day_dates","text":"","code":"generate_360_day_dates(2014, 2022) #>    [1] \"2014-01-01\" \"2014-01-02\" \"2014-01-03\" \"2014-01-04\" \"2014-01-05\" #>    [6] \"2014-01-06\" \"2014-01-07\" \"2014-01-08\" \"2014-01-09\" \"2014-01-10\" #>   [11] \"2014-01-11\" \"2014-01-12\" \"2014-01-13\" \"2014-01-14\" \"2014-01-15\" #>   [16] \"2014-01-16\" \"2014-01-17\" \"2014-01-18\" \"2014-01-19\" \"2014-01-20\" #>   [21] \"2014-01-21\" \"2014-01-22\" \"2014-01-23\" \"2014-01-24\" \"2014-01-25\" #>   [26] \"2014-01-26\" \"2014-01-27\" \"2014-01-28\" \"2014-01-29\" \"2014-01-30\" #>   [31] \"2014-02-01\" \"2014-02-02\" \"2014-02-03\" \"2014-02-04\" \"2014-02-05\" #>   [36] \"2014-02-06\" \"2014-02-07\" \"2014-02-08\" \"2014-02-09\" \"2014-02-10\" #>   [41] \"2014-02-11\" \"2014-02-12\" \"2014-02-13\" \"2014-02-14\" \"2014-02-15\" #>   [46] \"2014-02-16\" \"2014-02-17\" \"2014-02-18\" \"2014-02-19\" \"2014-02-20\" #>   [51] \"2014-02-21\" \"2014-02-22\" \"2014-02-23\" \"2014-02-24\" \"2014-02-25\" #>   [56] \"2014-02-26\" \"2014-02-27\" \"2014-02-28\" \"2014-02-29\" \"2014-02-30\" #>   [61] \"2014-03-01\" \"2014-03-02\" \"2014-03-03\" \"2014-03-04\" \"2014-03-05\" #>   [66] \"2014-03-06\" \"2014-03-07\" \"2014-03-08\" \"2014-03-09\" \"2014-03-10\" #>   [71] \"2014-03-11\" \"2014-03-12\" \"2014-03-13\" \"2014-03-14\" \"2014-03-15\" #>   [76] \"2014-03-16\" \"2014-03-17\" \"2014-03-18\" \"2014-03-19\" \"2014-03-20\" #>   [81] \"2014-03-21\" \"2014-03-22\" \"2014-03-23\" \"2014-03-24\" \"2014-03-25\" #>   [86] \"2014-03-26\" \"2014-03-27\" \"2014-03-28\" \"2014-03-29\" \"2014-03-30\" #>   [91] \"2014-04-01\" \"2014-04-02\" \"2014-04-03\" \"2014-04-04\" \"2014-04-05\" #>   [96] \"2014-04-06\" \"2014-04-07\" \"2014-04-08\" \"2014-04-09\" \"2014-04-10\" #>  [101] \"2014-04-11\" \"2014-04-12\" \"2014-04-13\" \"2014-04-14\" \"2014-04-15\" #>  [106] \"2014-04-16\" \"2014-04-17\" \"2014-04-18\" \"2014-04-19\" \"2014-04-20\" #>  [111] \"2014-04-21\" \"2014-04-22\" \"2014-04-23\" \"2014-04-24\" \"2014-04-25\" #>  [116] \"2014-04-26\" \"2014-04-27\" \"2014-04-28\" \"2014-04-29\" \"2014-04-30\" #>  [121] \"2014-05-01\" \"2014-05-02\" \"2014-05-03\" \"2014-05-04\" \"2014-05-05\" #>  [126] \"2014-05-06\" \"2014-05-07\" \"2014-05-08\" \"2014-05-09\" \"2014-05-10\" #>  [131] \"2014-05-11\" \"2014-05-12\" \"2014-05-13\" \"2014-05-14\" \"2014-05-15\" #>  [136] \"2014-05-16\" \"2014-05-17\" \"2014-05-18\" \"2014-05-19\" \"2014-05-20\" #>  [141] \"2014-05-21\" \"2014-05-22\" \"2014-05-23\" \"2014-05-24\" \"2014-05-25\" #>  [146] \"2014-05-26\" \"2014-05-27\" \"2014-05-28\" \"2014-05-29\" \"2014-05-30\" #>  [151] \"2014-06-01\" \"2014-06-02\" \"2014-06-03\" \"2014-06-04\" \"2014-06-05\" #>  [156] \"2014-06-06\" \"2014-06-07\" \"2014-06-08\" \"2014-06-09\" \"2014-06-10\" #>  [161] \"2014-06-11\" \"2014-06-12\" \"2014-06-13\" \"2014-06-14\" \"2014-06-15\" #>  [166] \"2014-06-16\" \"2014-06-17\" \"2014-06-18\" \"2014-06-19\" \"2014-06-20\" #>  [171] \"2014-06-21\" \"2014-06-22\" \"2014-06-23\" \"2014-06-24\" \"2014-06-25\" #>  [176] \"2014-06-26\" \"2014-06-27\" \"2014-06-28\" \"2014-06-29\" \"2014-06-30\" #>  [181] \"2014-07-01\" \"2014-07-02\" \"2014-07-03\" \"2014-07-04\" \"2014-07-05\" #>  [186] \"2014-07-06\" \"2014-07-07\" \"2014-07-08\" \"2014-07-09\" \"2014-07-10\" #>  [191] \"2014-07-11\" \"2014-07-12\" \"2014-07-13\" \"2014-07-14\" \"2014-07-15\" #>  [196] \"2014-07-16\" \"2014-07-17\" \"2014-07-18\" \"2014-07-19\" \"2014-07-20\" #>  [201] \"2014-07-21\" \"2014-07-22\" \"2014-07-23\" \"2014-07-24\" \"2014-07-25\" #>  [206] \"2014-07-26\" \"2014-07-27\" \"2014-07-28\" \"2014-07-29\" \"2014-07-30\" #>  [211] \"2014-08-01\" \"2014-08-02\" \"2014-08-03\" \"2014-08-04\" \"2014-08-05\" #>  [216] \"2014-08-06\" \"2014-08-07\" \"2014-08-08\" \"2014-08-09\" \"2014-08-10\" #>  [221] \"2014-08-11\" \"2014-08-12\" \"2014-08-13\" \"2014-08-14\" \"2014-08-15\" #>  [226] \"2014-08-16\" \"2014-08-17\" \"2014-08-18\" \"2014-08-19\" \"2014-08-20\" #>  [231] \"2014-08-21\" \"2014-08-22\" \"2014-08-23\" \"2014-08-24\" \"2014-08-25\" #>  [236] \"2014-08-26\" \"2014-08-27\" \"2014-08-28\" \"2014-08-29\" \"2014-08-30\" #>  [241] \"2014-09-01\" \"2014-09-02\" \"2014-09-03\" \"2014-09-04\" \"2014-09-05\" #>  [246] \"2014-09-06\" \"2014-09-07\" \"2014-09-08\" \"2014-09-09\" \"2014-09-10\" #>  [251] \"2014-09-11\" \"2014-09-12\" \"2014-09-13\" \"2014-09-14\" \"2014-09-15\" #>  [256] \"2014-09-16\" \"2014-09-17\" \"2014-09-18\" \"2014-09-19\" \"2014-09-20\" #>  [261] \"2014-09-21\" \"2014-09-22\" \"2014-09-23\" \"2014-09-24\" \"2014-09-25\" #>  [266] \"2014-09-26\" \"2014-09-27\" \"2014-09-28\" \"2014-09-29\" \"2014-09-30\" #>  [271] \"2014-10-01\" \"2014-10-02\" \"2014-10-03\" \"2014-10-04\" \"2014-10-05\" #>  [276] \"2014-10-06\" \"2014-10-07\" \"2014-10-08\" \"2014-10-09\" \"2014-10-10\" #>  [281] \"2014-10-11\" \"2014-10-12\" \"2014-10-13\" \"2014-10-14\" \"2014-10-15\" #>  [286] \"2014-10-16\" \"2014-10-17\" \"2014-10-18\" \"2014-10-19\" \"2014-10-20\" #>  [291] \"2014-10-21\" \"2014-10-22\" \"2014-10-23\" \"2014-10-24\" \"2014-10-25\" #>  [296] \"2014-10-26\" \"2014-10-27\" \"2014-10-28\" \"2014-10-29\" \"2014-10-30\" #>  [301] \"2014-11-01\" \"2014-11-02\" \"2014-11-03\" \"2014-11-04\" \"2014-11-05\" #>  [306] \"2014-11-06\" \"2014-11-07\" \"2014-11-08\" \"2014-11-09\" \"2014-11-10\" #>  [311] \"2014-11-11\" \"2014-11-12\" \"2014-11-13\" \"2014-11-14\" \"2014-11-15\" #>  [316] \"2014-11-16\" \"2014-11-17\" \"2014-11-18\" \"2014-11-19\" \"2014-11-20\" #>  [321] \"2014-11-21\" \"2014-11-22\" \"2014-11-23\" \"2014-11-24\" \"2014-11-25\" #>  [326] \"2014-11-26\" \"2014-11-27\" \"2014-11-28\" \"2014-11-29\" \"2014-11-30\" #>  [331] \"2014-12-01\" \"2014-12-02\" \"2014-12-03\" \"2014-12-04\" \"2014-12-05\" #>  [336] \"2014-12-06\" \"2014-12-07\" \"2014-12-08\" \"2014-12-09\" \"2014-12-10\" #>  [341] \"2014-12-11\" \"2014-12-12\" \"2014-12-13\" \"2014-12-14\" \"2014-12-15\" #>  [346] \"2014-12-16\" \"2014-12-17\" \"2014-12-18\" \"2014-12-19\" \"2014-12-20\" #>  [351] \"2014-12-21\" \"2014-12-22\" \"2014-12-23\" \"2014-12-24\" \"2014-12-25\" #>  [356] \"2014-12-26\" \"2014-12-27\" \"2014-12-28\" \"2014-12-29\" \"2014-12-30\" #>  [361] \"2015-01-01\" \"2015-01-02\" \"2015-01-03\" \"2015-01-04\" \"2015-01-05\" #>  [366] \"2015-01-06\" \"2015-01-07\" \"2015-01-08\" \"2015-01-09\" \"2015-01-10\" #>  [371] \"2015-01-11\" \"2015-01-12\" \"2015-01-13\" \"2015-01-14\" \"2015-01-15\" #>  [376] \"2015-01-16\" \"2015-01-17\" \"2015-01-18\" \"2015-01-19\" \"2015-01-20\" #>  [381] \"2015-01-21\" \"2015-01-22\" \"2015-01-23\" \"2015-01-24\" \"2015-01-25\" #>  [386] \"2015-01-26\" \"2015-01-27\" \"2015-01-28\" \"2015-01-29\" \"2015-01-30\" #>  [391] \"2015-02-01\" \"2015-02-02\" \"2015-02-03\" \"2015-02-04\" \"2015-02-05\" #>  [396] \"2015-02-06\" \"2015-02-07\" \"2015-02-08\" \"2015-02-09\" \"2015-02-10\" #>  [401] \"2015-02-11\" \"2015-02-12\" \"2015-02-13\" \"2015-02-14\" \"2015-02-15\" #>  [406] \"2015-02-16\" \"2015-02-17\" \"2015-02-18\" \"2015-02-19\" \"2015-02-20\" #>  [411] \"2015-02-21\" \"2015-02-22\" \"2015-02-23\" \"2015-02-24\" \"2015-02-25\" #>  [416] \"2015-02-26\" \"2015-02-27\" \"2015-02-28\" \"2015-02-29\" \"2015-02-30\" #>  [421] \"2015-03-01\" \"2015-03-02\" \"2015-03-03\" \"2015-03-04\" \"2015-03-05\" #>  [426] \"2015-03-06\" \"2015-03-07\" \"2015-03-08\" \"2015-03-09\" \"2015-03-10\" #>  [431] \"2015-03-11\" \"2015-03-12\" \"2015-03-13\" \"2015-03-14\" \"2015-03-15\" #>  [436] \"2015-03-16\" \"2015-03-17\" \"2015-03-18\" \"2015-03-19\" \"2015-03-20\" #>  [441] \"2015-03-21\" \"2015-03-22\" \"2015-03-23\" \"2015-03-24\" \"2015-03-25\" #>  [446] \"2015-03-26\" \"2015-03-27\" \"2015-03-28\" \"2015-03-29\" \"2015-03-30\" #>  [451] \"2015-04-01\" \"2015-04-02\" \"2015-04-03\" \"2015-04-04\" \"2015-04-05\" #>  [456] \"2015-04-06\" \"2015-04-07\" \"2015-04-08\" \"2015-04-09\" \"2015-04-10\" #>  [461] \"2015-04-11\" \"2015-04-12\" \"2015-04-13\" \"2015-04-14\" \"2015-04-15\" #>  [466] \"2015-04-16\" \"2015-04-17\" \"2015-04-18\" \"2015-04-19\" \"2015-04-20\" #>  [471] \"2015-04-21\" \"2015-04-22\" \"2015-04-23\" \"2015-04-24\" \"2015-04-25\" #>  [476] \"2015-04-26\" \"2015-04-27\" \"2015-04-28\" \"2015-04-29\" \"2015-04-30\" #>  [481] \"2015-05-01\" \"2015-05-02\" \"2015-05-03\" \"2015-05-04\" \"2015-05-05\" #>  [486] \"2015-05-06\" \"2015-05-07\" \"2015-05-08\" \"2015-05-09\" \"2015-05-10\" #>  [491] \"2015-05-11\" \"2015-05-12\" \"2015-05-13\" \"2015-05-14\" \"2015-05-15\" #>  [496] \"2015-05-16\" \"2015-05-17\" \"2015-05-18\" \"2015-05-19\" \"2015-05-20\" #>  [501] \"2015-05-21\" \"2015-05-22\" \"2015-05-23\" \"2015-05-24\" \"2015-05-25\" #>  [506] \"2015-05-26\" \"2015-05-27\" \"2015-05-28\" \"2015-05-29\" \"2015-05-30\" #>  [511] \"2015-06-01\" \"2015-06-02\" \"2015-06-03\" \"2015-06-04\" \"2015-06-05\" #>  [516] \"2015-06-06\" \"2015-06-07\" \"2015-06-08\" \"2015-06-09\" \"2015-06-10\" #>  [521] \"2015-06-11\" \"2015-06-12\" \"2015-06-13\" \"2015-06-14\" \"2015-06-15\" #>  [526] \"2015-06-16\" \"2015-06-17\" \"2015-06-18\" \"2015-06-19\" \"2015-06-20\" #>  [531] \"2015-06-21\" \"2015-06-22\" \"2015-06-23\" \"2015-06-24\" \"2015-06-25\" #>  [536] \"2015-06-26\" \"2015-06-27\" \"2015-06-28\" \"2015-06-29\" \"2015-06-30\" #>  [541] \"2015-07-01\" \"2015-07-02\" \"2015-07-03\" \"2015-07-04\" \"2015-07-05\" #>  [546] \"2015-07-06\" \"2015-07-07\" \"2015-07-08\" \"2015-07-09\" \"2015-07-10\" #>  [551] \"2015-07-11\" \"2015-07-12\" \"2015-07-13\" \"2015-07-14\" \"2015-07-15\" #>  [556] \"2015-07-16\" \"2015-07-17\" \"2015-07-18\" \"2015-07-19\" \"2015-07-20\" #>  [561] \"2015-07-21\" \"2015-07-22\" \"2015-07-23\" \"2015-07-24\" \"2015-07-25\" #>  [566] \"2015-07-26\" \"2015-07-27\" \"2015-07-28\" \"2015-07-29\" \"2015-07-30\" #>  [571] \"2015-08-01\" \"2015-08-02\" \"2015-08-03\" \"2015-08-04\" \"2015-08-05\" #>  [576] \"2015-08-06\" \"2015-08-07\" \"2015-08-08\" \"2015-08-09\" \"2015-08-10\" #>  [581] \"2015-08-11\" \"2015-08-12\" \"2015-08-13\" \"2015-08-14\" \"2015-08-15\" #>  [586] \"2015-08-16\" \"2015-08-17\" \"2015-08-18\" \"2015-08-19\" \"2015-08-20\" #>  [591] \"2015-08-21\" \"2015-08-22\" \"2015-08-23\" \"2015-08-24\" \"2015-08-25\" #>  [596] \"2015-08-26\" \"2015-08-27\" \"2015-08-28\" \"2015-08-29\" \"2015-08-30\" #>  [601] \"2015-09-01\" \"2015-09-02\" \"2015-09-03\" \"2015-09-04\" \"2015-09-05\" #>  [606] \"2015-09-06\" \"2015-09-07\" \"2015-09-08\" \"2015-09-09\" \"2015-09-10\" #>  [611] \"2015-09-11\" \"2015-09-12\" \"2015-09-13\" \"2015-09-14\" \"2015-09-15\" #>  [616] \"2015-09-16\" \"2015-09-17\" \"2015-09-18\" \"2015-09-19\" \"2015-09-20\" #>  [621] \"2015-09-21\" \"2015-09-22\" \"2015-09-23\" \"2015-09-24\" \"2015-09-25\" #>  [626] \"2015-09-26\" \"2015-09-27\" \"2015-09-28\" \"2015-09-29\" \"2015-09-30\" #>  [631] \"2015-10-01\" \"2015-10-02\" \"2015-10-03\" \"2015-10-04\" \"2015-10-05\" #>  [636] \"2015-10-06\" \"2015-10-07\" \"2015-10-08\" \"2015-10-09\" \"2015-10-10\" #>  [641] \"2015-10-11\" \"2015-10-12\" \"2015-10-13\" \"2015-10-14\" \"2015-10-15\" #>  [646] \"2015-10-16\" \"2015-10-17\" \"2015-10-18\" \"2015-10-19\" \"2015-10-20\" #>  [651] \"2015-10-21\" \"2015-10-22\" \"2015-10-23\" \"2015-10-24\" \"2015-10-25\" #>  [656] \"2015-10-26\" \"2015-10-27\" \"2015-10-28\" \"2015-10-29\" \"2015-10-30\" #>  [661] \"2015-11-01\" \"2015-11-02\" \"2015-11-03\" \"2015-11-04\" \"2015-11-05\" #>  [666] \"2015-11-06\" \"2015-11-07\" \"2015-11-08\" \"2015-11-09\" \"2015-11-10\" #>  [671] \"2015-11-11\" \"2015-11-12\" \"2015-11-13\" \"2015-11-14\" \"2015-11-15\" #>  [676] \"2015-11-16\" \"2015-11-17\" \"2015-11-18\" \"2015-11-19\" \"2015-11-20\" #>  [681] \"2015-11-21\" \"2015-11-22\" \"2015-11-23\" \"2015-11-24\" \"2015-11-25\" #>  [686] \"2015-11-26\" \"2015-11-27\" \"2015-11-28\" \"2015-11-29\" \"2015-11-30\" #>  [691] \"2015-12-01\" \"2015-12-02\" \"2015-12-03\" \"2015-12-04\" \"2015-12-05\" #>  [696] \"2015-12-06\" \"2015-12-07\" \"2015-12-08\" \"2015-12-09\" \"2015-12-10\" #>  [701] \"2015-12-11\" \"2015-12-12\" \"2015-12-13\" \"2015-12-14\" \"2015-12-15\" #>  [706] \"2015-12-16\" \"2015-12-17\" \"2015-12-18\" \"2015-12-19\" \"2015-12-20\" #>  [711] \"2015-12-21\" \"2015-12-22\" \"2015-12-23\" \"2015-12-24\" \"2015-12-25\" #>  [716] \"2015-12-26\" \"2015-12-27\" \"2015-12-28\" \"2015-12-29\" \"2015-12-30\" #>  [721] \"2016-01-01\" \"2016-01-02\" \"2016-01-03\" \"2016-01-04\" \"2016-01-05\" #>  [726] \"2016-01-06\" \"2016-01-07\" \"2016-01-08\" \"2016-01-09\" \"2016-01-10\" #>  [731] \"2016-01-11\" \"2016-01-12\" \"2016-01-13\" \"2016-01-14\" \"2016-01-15\" #>  [736] \"2016-01-16\" \"2016-01-17\" \"2016-01-18\" \"2016-01-19\" \"2016-01-20\" #>  [741] \"2016-01-21\" \"2016-01-22\" \"2016-01-23\" \"2016-01-24\" \"2016-01-25\" #>  [746] \"2016-01-26\" \"2016-01-27\" \"2016-01-28\" \"2016-01-29\" \"2016-01-30\" #>  [751] \"2016-02-01\" \"2016-02-02\" \"2016-02-03\" \"2016-02-04\" \"2016-02-05\" #>  [756] \"2016-02-06\" \"2016-02-07\" \"2016-02-08\" \"2016-02-09\" \"2016-02-10\" #>  [761] \"2016-02-11\" \"2016-02-12\" \"2016-02-13\" \"2016-02-14\" \"2016-02-15\" #>  [766] \"2016-02-16\" \"2016-02-17\" \"2016-02-18\" \"2016-02-19\" \"2016-02-20\" #>  [771] \"2016-02-21\" \"2016-02-22\" \"2016-02-23\" \"2016-02-24\" \"2016-02-25\" #>  [776] \"2016-02-26\" \"2016-02-27\" \"2016-02-28\" \"2016-02-29\" \"2016-02-30\" #>  [781] \"2016-03-01\" \"2016-03-02\" \"2016-03-03\" \"2016-03-04\" \"2016-03-05\" #>  [786] \"2016-03-06\" \"2016-03-07\" \"2016-03-08\" \"2016-03-09\" \"2016-03-10\" #>  [791] \"2016-03-11\" \"2016-03-12\" \"2016-03-13\" \"2016-03-14\" \"2016-03-15\" #>  [796] \"2016-03-16\" \"2016-03-17\" \"2016-03-18\" \"2016-03-19\" \"2016-03-20\" #>  [801] \"2016-03-21\" \"2016-03-22\" \"2016-03-23\" \"2016-03-24\" \"2016-03-25\" #>  [806] \"2016-03-26\" \"2016-03-27\" \"2016-03-28\" \"2016-03-29\" \"2016-03-30\" #>  [811] \"2016-04-01\" \"2016-04-02\" \"2016-04-03\" \"2016-04-04\" \"2016-04-05\" #>  [816] \"2016-04-06\" \"2016-04-07\" \"2016-04-08\" \"2016-04-09\" \"2016-04-10\" #>  [821] \"2016-04-11\" \"2016-04-12\" \"2016-04-13\" \"2016-04-14\" \"2016-04-15\" #>  [826] \"2016-04-16\" \"2016-04-17\" \"2016-04-18\" \"2016-04-19\" \"2016-04-20\" #>  [831] \"2016-04-21\" \"2016-04-22\" \"2016-04-23\" \"2016-04-24\" \"2016-04-25\" #>  [836] \"2016-04-26\" \"2016-04-27\" \"2016-04-28\" \"2016-04-29\" \"2016-04-30\" #>  [841] \"2016-05-01\" \"2016-05-02\" \"2016-05-03\" \"2016-05-04\" \"2016-05-05\" #>  [846] \"2016-05-06\" \"2016-05-07\" \"2016-05-08\" \"2016-05-09\" \"2016-05-10\" #>  [851] \"2016-05-11\" \"2016-05-12\" \"2016-05-13\" \"2016-05-14\" \"2016-05-15\" #>  [856] \"2016-05-16\" \"2016-05-17\" \"2016-05-18\" \"2016-05-19\" \"2016-05-20\" #>  [861] \"2016-05-21\" \"2016-05-22\" \"2016-05-23\" \"2016-05-24\" \"2016-05-25\" #>  [866] \"2016-05-26\" \"2016-05-27\" \"2016-05-28\" \"2016-05-29\" \"2016-05-30\" #>  [871] \"2016-06-01\" \"2016-06-02\" \"2016-06-03\" \"2016-06-04\" \"2016-06-05\" #>  [876] \"2016-06-06\" \"2016-06-07\" \"2016-06-08\" \"2016-06-09\" \"2016-06-10\" #>  [881] \"2016-06-11\" \"2016-06-12\" \"2016-06-13\" \"2016-06-14\" \"2016-06-15\" #>  [886] \"2016-06-16\" \"2016-06-17\" \"2016-06-18\" \"2016-06-19\" \"2016-06-20\" #>  [891] \"2016-06-21\" \"2016-06-22\" \"2016-06-23\" \"2016-06-24\" \"2016-06-25\" #>  [896] \"2016-06-26\" \"2016-06-27\" \"2016-06-28\" \"2016-06-29\" \"2016-06-30\" #>  [901] \"2016-07-01\" \"2016-07-02\" \"2016-07-03\" \"2016-07-04\" \"2016-07-05\" #>  [906] \"2016-07-06\" \"2016-07-07\" \"2016-07-08\" \"2016-07-09\" \"2016-07-10\" #>  [911] \"2016-07-11\" \"2016-07-12\" \"2016-07-13\" \"2016-07-14\" \"2016-07-15\" #>  [916] \"2016-07-16\" \"2016-07-17\" \"2016-07-18\" \"2016-07-19\" \"2016-07-20\" #>  [921] \"2016-07-21\" \"2016-07-22\" \"2016-07-23\" \"2016-07-24\" \"2016-07-25\" #>  [926] \"2016-07-26\" \"2016-07-27\" \"2016-07-28\" \"2016-07-29\" \"2016-07-30\" #>  [931] \"2016-08-01\" \"2016-08-02\" \"2016-08-03\" \"2016-08-04\" \"2016-08-05\" #>  [936] \"2016-08-06\" \"2016-08-07\" \"2016-08-08\" \"2016-08-09\" \"2016-08-10\" #>  [941] \"2016-08-11\" \"2016-08-12\" \"2016-08-13\" \"2016-08-14\" \"2016-08-15\" #>  [946] \"2016-08-16\" \"2016-08-17\" \"2016-08-18\" \"2016-08-19\" \"2016-08-20\" #>  [951] \"2016-08-21\" \"2016-08-22\" \"2016-08-23\" \"2016-08-24\" \"2016-08-25\" #>  [956] \"2016-08-26\" \"2016-08-27\" \"2016-08-28\" \"2016-08-29\" \"2016-08-30\" #>  [961] \"2016-09-01\" \"2016-09-02\" \"2016-09-03\" \"2016-09-04\" \"2016-09-05\" #>  [966] \"2016-09-06\" \"2016-09-07\" \"2016-09-08\" \"2016-09-09\" \"2016-09-10\" #>  [971] \"2016-09-11\" \"2016-09-12\" \"2016-09-13\" \"2016-09-14\" \"2016-09-15\" #>  [976] \"2016-09-16\" \"2016-09-17\" \"2016-09-18\" \"2016-09-19\" \"2016-09-20\" #>  [981] \"2016-09-21\" \"2016-09-22\" \"2016-09-23\" \"2016-09-24\" \"2016-09-25\" #>  [986] \"2016-09-26\" \"2016-09-27\" \"2016-09-28\" \"2016-09-29\" \"2016-09-30\" #>  [991] \"2016-10-01\" \"2016-10-02\" \"2016-10-03\" \"2016-10-04\" \"2016-10-05\" #>  [996] \"2016-10-06\" \"2016-10-07\" \"2016-10-08\" \"2016-10-09\" \"2016-10-10\" #>  [ reached 'max' / getOption(\"max.print\") -- omitted 2240 entries ]"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_comparison_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Model-Observation Comparison Function — generate_comparison_function","title":"Generate Model-Observation Comparison Function — generate_comparison_function","text":"Wraps call generate_incidence_comparison() produce likelihood loss function comparing model output observed data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_comparison_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Model-Observation Comparison Function — generate_comparison_function","text":"","code":"generate_comparison_function(   month,   age_for_inf,   incidence_observed,   include_prev )"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_comparison_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Model-Observation Comparison Function — generate_comparison_function","text":"month Logical; whether model data aggregated calendar month. age_for_inf Character; specifies age group used inference (e.g., \"inc_C\" \"inc_A\"). incidence_observed data frame observed incidence data. include_prev Logical; whether include prevalence data comparison function.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_comparison_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Model-Observation Comparison Function — generate_comparison_function","text":"comparison function object can passed mcstate::pmcmc() inference routines.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_smc_coverage_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SMC Coverage Matrix for Simulation — generate_smc_coverage_matrix","title":"Generate SMC Coverage Matrix for Simulation — generate_smc_coverage_matrix","text":"Creates monthly covariate matrix SMC coverage deployment pattern.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_smc_coverage_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SMC Coverage Matrix for Simulation — generate_smc_coverage_matrix","text":"","code":"generate_smc_coverage_matrix(   start_date,   end_date,   years,   month_pattern,   avg_cov,   exclude_years = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_smc_coverage_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SMC Coverage Matrix for Simulation — generate_smc_coverage_matrix","text":"start_date Simulation start date (\"YYYY-MM-DD\"). end_date Simulation end date (\"YYYY-MM-DD\"). years Numeric vector years apply SMC schedule. month_pattern 12-length binary vector representing monthly SMC rounds. avg_cov Numeric average SMC coverage apply. exclude_years Optional vector years exclude coverage.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_smc_coverage_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SMC Coverage Matrix for Simulation — generate_smc_coverage_matrix","text":"data frame date_ymd cov_SMC columns.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_synthetic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Synthetic Incidence Data (Optional) — generate_synthetic_data","title":"Generate Synthetic Incidence Data (Optional) — generate_synthetic_data","text":"Optionally generates synthetic incidence data model, ability add Poisson noise.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_synthetic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Synthetic Incidence Data (Optional) — generate_synthetic_data","text":"","code":"generate_synthetic_data(   model,   param_inputs,   dates,   month,   month_unequal_days,   noise,   seed,   synthetic,   incidence_df )"},{"path":"https://swisstph.github.io/malclimsim/reference/generate_synthetic_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Synthetic Incidence Data (Optional) — generate_synthetic_data","text":"model simulation model object used generate synthetic data. param_inputs list model parameters use simulation. dates vector two dates (start_date, end_date) specifying simulation period. month Logical; whether aggregate simulated data calendar months. month_unequal_days Logical; whether weight months unequal days simulation. noise Logical; TRUE, adds Poisson noise simulated outputs. seed Integer; random seed used reproducible noise. synthetic Logical; TRUE, synthetic data generated. FALSE, returns input incidence_df. incidence_df data frame observed incidence; returned unchanged synthetic = FALSE.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/generate_synthetic_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Synthetic Incidence Data (Optional) — generate_synthetic_data","text":"data frame synthetic observed incidence data columns inc, inc_C, inc_A.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/gen_smc_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an SMC deployment schedule with optional month-specific coverages — gen_smc_schedule","title":"Generate an SMC deployment schedule with optional month-specific coverages — gen_smc_schedule","text":"Generate SMC deployment schedule optional month-specific coverages","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/gen_smc_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an SMC deployment schedule with optional month-specific coverages — gen_smc_schedule","text":"","code":"gen_smc_schedule(   start_date,   end_date,   years,   months_active,   months_30_days = FALSE,   coverage = 0.9,   smc_day_of_month = 1 )"},{"path":"https://swisstph.github.io/malclimsim/reference/gen_smc_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an SMC deployment schedule with optional month-specific coverages — gen_smc_schedule","text":"start_date Character. First date schedule (\"YYYY-MM-DD\"). end_date Character. Last  date schedule (\"YYYY-MM-DD\"). years Integer vector. Years included schedule. months_active Matrix (n_years × 12) 1 = SMC month, 0 = . months_30_days Logical. Use 360-day calendar (every month = 30 days)? coverage Either () single numeric (legacy behaviour) (ii) numeric vector length 12 named vector whose names month numbers (1–12) / abbreviations (\"Jan\", \"Feb\", …).  Values give coverage month. smc_day_of_month Integer. Day month SMC administered.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/gen_smc_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an SMC deployment schedule with optional month-specific coverages — gen_smc_schedule","text":"data.frame columns: dates – sequence dates period SMC   – 1 round day, 0 otherwise cov   – coverage applied (piecewise-constant blocks) decay – efficacy decay computed round days","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_field_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Model Output Field Names for Observation Function — get_field_mapping","title":"Get Model Output Field Names for Observation Function — get_field_mapping","text":"Returns named list model state variables used incidence comparisons, based time scale age group configuration.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_field_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Model Output Field Names for Observation Function — get_field_mapping","text":"","code":"get_field_mapping(time, age_group)"},{"path":"https://swisstph.github.io/malclimsim/reference/get_field_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Model Output Field Names for Observation Function — get_field_mapping","text":"time Character string. Either \"month\" \"week\". age_group Character. One : \"total\", \"sep_ages\", \"u5\", \"o5\", \"all_ages\".","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_field_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Model Output Field Names for Observation Function — get_field_mapping","text":"named list one : mu, mu_C, mu_A, mu_C1, mu_C2, etc. correspond expected incidence variables model output.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_observation_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Observation Function Based on User Configuration — get_observation_function","title":"Get Observation Function Based on User Configuration — get_observation_function","text":"helper function allows users specify key options time resolution, age group, inclusion prevalence, whether model SMC covariate using beta_1.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_observation_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Observation Function Based on User Configuration — get_observation_function","text":"","code":"get_observation_function(   month = TRUE,   age_for_inf = \"u5\",   incidence_df,   include_prev = TRUE,   use_SMC_as_covariate = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/get_observation_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Observation Function Based on User Configuration — get_observation_function","text":"month Logical. TRUE monthly data, FALSE weekly. age_for_inf Character. One : \"total\", \"sep_ages\", \"u5\", \"o5\", \"all_ages\". incidence_df data frame observed incidence prevalence values. include_prev Logical. TRUE, includes prevalence likelihood. use_SMC_as_covariate Logical. TRUE, uses beta_1 covariate effect incidence.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_observation_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Observation Function Based on User Configuration — get_observation_function","text":"likelihood function takes (state, observed, pars) arguments.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_population_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","title":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","text":"Computes population multipliers time -5 (r_C) -5 (r_A) groups, using fixed daily exponential growth. Time steps can monthly (30 days) weekly (7 days).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_population_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","text":"","code":"get_population_scaling(   n,   month = TRUE,   growth_rate_C = 1.026^(1/360),   growth_rate_A = 1.026^(1/360),   init_r_C = 1,   init_r_A = 1 )"},{"path":"https://swisstph.github.io/malclimsim/reference/get_population_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","text":"n Integer. Number time points generate (e.g. months weeks). month Logical. TRUE, use 30-day months; FALSE, use 7-day weeks. growth_rate_C Daily growth rate -5 population. Default corresponds 2.6% per year. growth_rate_A Daily growth rate -5 population. Default corresponds 2.6% per year. init_r_C Initial multiplier r_C (default = 1). init_r_A Initial multiplier r_A (default = 1).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_population_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","text":"data frame columns: timestep, r_C, r_A","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/get_population_scaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Vectors of Population Growth Scaling (r_C and r_A) — get_population_scaling","text":"","code":"# Monthly population growth over 60 months get_population_scaling(n = 60, month = TRUE) #>    timestep model_days      r_C      r_A #> 1         1          0 1.000000 1.000000 #> 2         2         30 1.002141 1.002141 #> 3         3         60 1.004287 1.004287 #> 4         4         90 1.006438 1.006438 #> 5         5        120 1.008593 1.008593 #> 6         6        150 1.010752 1.010752 #> 7         7        180 1.012917 1.012917 #> 8         8        210 1.015086 1.015086 #> 9         9        240 1.017259 1.017259 #> 10       10        270 1.019437 1.019437 #> 11       11        300 1.021620 1.021620 #> 12       12        330 1.023808 1.023808 #> 13       13        360 1.026000 1.026000 #> 14       14        390 1.028197 1.028197 #> 15       15        420 1.030399 1.030399 #> 16       16        450 1.032605 1.032605 #> 17       17        480 1.034816 1.034816 #> 18       18        510 1.037032 1.037032 #> 19       19        540 1.039252 1.039252 #> 20       20        570 1.041478 1.041478 #> 21       21        600 1.043708 1.043708 #> 22       22        630 1.045943 1.045943 #> 23       23        660 1.048182 1.048182 #> 24       24        690 1.050427 1.050427 #> 25       25        720 1.052676 1.052676 #> 26       26        750 1.054930 1.054930 #> 27       27        780 1.057189 1.057189 #> 28       28        810 1.059453 1.059453 #> 29       29        840 1.061721 1.061721 #> 30       30        870 1.063995 1.063995 #> 31       31        900 1.066273 1.066273 #> 32       32        930 1.068556 1.068556 #> 33       33        960 1.070844 1.070844 #> 34       34        990 1.073137 1.073137 #> 35       35       1020 1.075435 1.075435 #> 36       36       1050 1.077738 1.077738 #> 37       37       1080 1.080046 1.080046 #> 38       38       1110 1.082358 1.082358 #> 39       39       1140 1.084676 1.084676 #> 40       40       1170 1.086998 1.086998 #> 41       41       1200 1.089326 1.089326 #> 42       42       1230 1.091659 1.091659 #> 43       43       1260 1.093996 1.093996 #> 44       44       1290 1.096339 1.096339 #> 45       45       1320 1.098686 1.098686 #> 46       46       1350 1.101039 1.101039 #> 47       47       1380 1.103396 1.103396 #> 48       48       1410 1.105759 1.105759 #> 49       49       1440 1.108127 1.108127 #> 50       50       1470 1.110500 1.110500 #> 51       51       1500 1.112877 1.112877 #> 52       52       1530 1.115260 1.115260 #> 53       53       1560 1.117648 1.117648 #> 54       54       1590 1.120042 1.120042 #> 55       55       1620 1.122440 1.122440 #> 56       56       1650 1.124843 1.124843 #> 57       57       1680 1.127252 1.127252 #> 58       58       1710 1.129666 1.129666 #> 59       59       1740 1.132085 1.132085 #> 60       60       1770 1.134509 1.134509  # Weekly population growth over 120 weeks with custom growth rates get_population_scaling(n = 120, month = FALSE, growth_rate_C = 1.00005, growth_rate_A = 1.00003) #>     timestep model_days      r_C      r_A #> 1          1          0 1.000000 1.000000 #> 2          2          7 1.000350 1.000210 #> 3          3         14 1.000700 1.000420 #> 4          4         21 1.001051 1.000630 #> 5          5         28 1.001401 1.000840 #> 6          6         35 1.001751 1.001051 #> 7          7         42 1.002102 1.001261 #> 8          8         49 1.002453 1.001471 #> 9          9         56 1.002804 1.001681 #> 10        10         63 1.003155 1.001892 #> 11        11         70 1.003506 1.002102 #> 12        12         77 1.003857 1.002313 #> 13        13         84 1.004209 1.002523 #> 14        14         91 1.004560 1.002734 #> 15        15         98 1.004912 1.002944 #> 16        16        105 1.005264 1.003155 #> 17        17        112 1.005616 1.003366 #> 18        18        119 1.005968 1.003576 #> 19        19        126 1.006320 1.003787 #> 20        20        133 1.006672 1.003998 #> 21        21        140 1.007024 1.004209 #> 22        22        147 1.007377 1.004420 #> 23        23        154 1.007730 1.004631 #> 24        24        161 1.008082 1.004842 #> 25        25        168 1.008435 1.005053 #> 26        26        175 1.008788 1.005264 #> 27        27        182 1.009141 1.005475 #> 28        28        189 1.009495 1.005686 #> 29        29        196 1.009848 1.005897 #> 30        30        203 1.010201 1.006108 #> 31        31        210 1.010555 1.006320 #> 32        32        217 1.010909 1.006531 #> 33        33        224 1.011263 1.006743 #> 34        34        231 1.011617 1.006954 #> 35        35        238 1.011971 1.007165 #> 36        36        245 1.012325 1.007377 #> 37        37        252 1.012679 1.007589 #> 38        38        259 1.013034 1.007800 #> 39        39        266 1.013389 1.008012 #> 40        40        273 1.013743 1.008224 #> 41        41        280 1.014098 1.008435 #> 42        42        287 1.014453 1.008647 #> 43        43        294 1.014808 1.008859 #> 44        44        301 1.015163 1.009071 #> 45        45        308 1.015519 1.009283 #> 46        46        315 1.015874 1.009495 #> 47        47        322 1.016230 1.009707 #> 48        48        329 1.016586 1.009919 #> 49        49        336 1.016941 1.010131 #> 50        50        343 1.017297 1.010343 #> 51        51        350 1.017654 1.010555 #> 52        52        357 1.018010 1.010767 #> 53        53        364 1.018366 1.010980 #> 54        54        371 1.018723 1.011192 #> 55        55        378 1.019079 1.011404 #> 56        56        385 1.019436 1.011617 #> 57        57        392 1.019793 1.011829 #> 58        58        399 1.020150 1.012042 #> 59        59        406 1.020507 1.012254 #> 60        60        413 1.020864 1.012467 #> 61        61        420 1.021222 1.012680 #> 62        62        427 1.021579 1.012892 #> 63        63        434 1.021937 1.013105 #> 64        64        441 1.022294 1.013318 #> 65        65        448 1.022652 1.013531 #> 66        66        455 1.023010 1.013743 #> 67        67        462 1.023368 1.013956 #> 68        68        469 1.023727 1.014169 #> 69        69        476 1.024085 1.014382 #> 70        70        483 1.024443 1.014595 #> 71        71        490 1.024802 1.014808 #> 72        72        497 1.025161 1.015021 #> 73        73        504 1.025520 1.015235 #> 74        74        511 1.025879 1.015448 #> 75        75        518 1.026238 1.015661 #> 76        76        525 1.026597 1.015874 #> 77        77        532 1.026956 1.016088 #> 78        78        539 1.027316 1.016301 #> 79        79        546 1.027675 1.016515 #> 80        80        553 1.028035 1.016728 #> 81        81        560 1.028395 1.016942 #> 82        82        567 1.028755 1.017155 #> 83        83        574 1.029115 1.017369 #> 84        84        581 1.029475 1.017583 #> 85        85        588 1.029836 1.017796 #> 86        86        595 1.030196 1.018010 #> 87        87        602 1.030557 1.018224 #> 88        88        609 1.030918 1.018438 #> 89        89        616 1.031278 1.018652 #> 90        90        623 1.031639 1.018865 #> 91        91        630 1.032001 1.019079 #> 92        92        637 1.032362 1.019293 #> 93        93        644 1.032723 1.019508 #> 94        94        651 1.033085 1.019722 #> 95        95        658 1.033446 1.019936 #> 96        96        665 1.033808 1.020150 #> 97        97        672 1.034170 1.020364 #> 98        98        679 1.034532 1.020579 #> 99        99        686 1.034894 1.020793 #> 100      100        693 1.035256 1.021007 #> 101      101        700 1.035619 1.021222 #> 102      102        707 1.035981 1.021436 #> 103      103        714 1.036344 1.021651 #> 104      104        721 1.036707 1.021865 #> 105      105        728 1.037070 1.022080 #> 106      106        735 1.037433 1.022295 #> 107      107        742 1.037796 1.022509 #> 108      108        749 1.038159 1.022724 #> 109      109        756 1.038523 1.022939 #> 110      110        763 1.038886 1.023154 #> 111      111        770 1.039250 1.023369 #> 112      112        777 1.039614 1.023583 #> 113      113        784 1.039977 1.023798 #> 114      114        791 1.040341 1.024013 #> 115      115        798 1.040706 1.024228 #> 116      116        805 1.041070 1.024444 #> 117      117        812 1.041434 1.024659 #> 118      118        819 1.041799 1.024874 #> 119      119        826 1.042164 1.025089 #> 120      120        833 1.042528 1.025304"},{"path":"https://swisstph.github.io/malclimsim/reference/import_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Import an Odin Model into the malclimsim Package — import_model","title":"Import an Odin Model into the malclimsim Package — import_model","text":"Import Odin Model malclimsim Package","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/import_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import an Odin Model into the malclimsim Package — import_model","text":"","code":"import_model(model_path, model_name)"},{"path":"https://swisstph.github.io/malclimsim/reference/import_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import an Odin Model into the malclimsim Package — import_model","text":"model_path Full file path external Odin model (R file) imported. model_name Desired name (without \".R\") model stored inside package.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/import_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import an Odin Model into the malclimsim Package — import_model","text":"None. function copies model file package's models directory.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/import_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import an Odin Model into the malclimsim Package — import_model","text":"","code":"import_model(\"path/to/external_model.R\", \"my_new_model\") #> [1] FALSE"},{"path":"https://swisstph.github.io/malclimsim/reference/impute_climate_to_end_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","title":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","text":"function imputes missing dates climate time series using average value (month, day) combination across prior years dataset. useful filling short gaps end time series, imputing values December 2023 using earlier years’ averages.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/impute_climate_to_end_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","text":"","code":"impute_climate_to_end_date(data, end_date)"},{"path":"https://swisstph.github.io/malclimsim/reference/impute_climate_to_end_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","text":"data data frame least following columns: dates (Date): observation date. CumulativeRainfall, anom, temp: Numeric climate variables impute. end_date Date object indicating final date present. function impute values last available date end_date. Assumes dates column ends value.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/impute_climate_to_end_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","text":"data frame original data appended imputed values, sorted dates.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/impute_climate_to_end_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Climate Data Using Climatological Daily Means — impute_climate_to_end_date","text":"","code":"# Suppose your climate data ends at 2023-12-01 # met_360_completed <- impute_climate_to_end_date(met_360, as.Date(\"2023-12-31\"))"},{"path":"https://swisstph.github.io/malclimsim/reference/index-topic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Index Mapping for Model Variables — index","title":"Create Index Mapping for Model Variables — index","text":"function creates list indices different model variables, organizing 'run' 'state' categories based provided info.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/index-topic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Index Mapping for Model Variables — index","text":"","code":"index(info)"},{"path":"https://swisstph.github.io/malclimsim/reference/index-topic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Index Mapping for Model Variables — index","text":"info list containing index information, typically provided model setup.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/index-topic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Index Mapping for Model Variables — index","text":"list containing two elements, run state, named indices different model variables.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/index-topic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Index Mapping for Model Variables — index","text":"","code":"model_indices <- index(info) #> Error: object 'info' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/inf_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC Inference Simulation — inf_run","title":"Run MCMC Inference Simulation — inf_run","text":"Generates synthetic incidence data required, sets MCMC parameters priors, defines model comparison functions, runs MCMC process.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/inf_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC Inference Simulation — inf_run","text":"","code":"inf_run(   model,   param_inputs,   control_params,   params_to_estimate,   proposal_matrix,   adaptive_params,   start_values,   noise = FALSE,   seed = 24,   month_unequal_days = FALSE,   dates,   synthetic = TRUE,   incidence_df = NULL,   save_trajectories = TRUE,   rerun_n = Inf,   rerun_random = FALSE,   param_priors = NULL,   override_priors = NULL,   n_years_warmup = 3,   obs_config )"},{"path":"https://swisstph.github.io/malclimsim/reference/inf_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC Inference Simulation — inf_run","text":"model model object used simulation inference. param_inputs List input parameters model, including temperature, decay, coverage details. control_params Control parameters MCMC process including chain, burn-, step counts. params_to_estimate Character vector parameters estimate inference. proposal_matrix Covariance matrix MCMC proposal distribution. adaptive_params Parameters adaptive proposal distribution adaptive MCMC used. start_values Initial parameter values starting MCMC chains. noise Logical; TRUE, adds noise synthetic incidence data. seed Numeric; sets random seed reproducibility. month_unequal_days Logical; indicates monthly data unequal days. dates Vector start end dates simulation period. synthetic Logical; TRUE, generates synthetic incidence data. incidence_df Data frame observed incidence data synthetic. save_trajectories Logical; TRUE, saves MCMC trajectories. rerun_n Numeric; frequency re-running MCMC proposals. rerun_random Logical; TRUE, re-runs MCMC randomly. param_priors Optional prior list MCMC parameters. n_years_warmup Number years run prior start observation period. obs_config named list specifying observation model configuration. Use make_obs_config() construct .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/inf_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC Inference Simulation — inf_run","text":"list containing MCMC results, including posterior samples, fixed parameters, priors, incidence data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/initialize_observation_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Observation Time Index for Incidence Data — initialize_observation_time","title":"Initialize Observation Time Index for Incidence Data — initialize_observation_time","text":"Aligns simulated observed data setting initial time index (month_no) observations.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/initialize_observation_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Observation Time Index for Incidence Data — initialize_observation_time","text":"","code":"initialize_observation_time(simulated_result, incidence_df)"},{"path":"https://swisstph.github.io/malclimsim/reference/initialize_observation_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Observation Time Index for Incidence Data — initialize_observation_time","text":"simulated_result data frame simulation output, date_ymd column. incidence_df data frame observed incidence data, date_ymd column.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/initialize_observation_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Observation Time Index for Incidence Data — initialize_observation_time","text":"integer 0, updates month_no column incidence_df -place (used alignment).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/lag_and_trim_smc_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Lag and Trim SMC and Climate Data.frames — lag_and_trim_smc_climate","title":"Lag and Trim SMC and Climate Data.frames — lag_and_trim_smc_climate","text":"validation, trims & reorders SMC Climate row corresponds calendar date, Climate lagged lag_days.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/lag_and_trim_smc_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lag and Trim SMC and Climate Data.frames — lag_and_trim_smc_climate","text":"","code":"lag_and_trim_smc_climate(smc_df, clim_df, lag_days)"},{"path":"https://swisstph.github.io/malclimsim/reference/lag_and_trim_smc_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lag and Trim SMC and Climate Data.frames — lag_and_trim_smc_climate","text":"smc_df Data.frame dates (Date) SMC columns. clim_df Data.frame dates (Date) climate columns. lag_days Integer ≥ 0: days Climate lags behind SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/lag_and_trim_smc_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lag and Trim SMC and Climate Data.frames — lag_and_trim_smc_climate","text":"List : smc — ordered SMC data.frame, climate — climate aligned row_i = SMC_date_i − lag_days.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_clean_smc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and clean raw SMC coverage data — load_clean_smc_data","title":"Load and clean raw SMC coverage data — load_clean_smc_data","text":"Cleans formats SMC coverage data. Allows flexibility input: user can supply either data frame directly path file (Excel RDS). data paths NULL, function returns error.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_clean_smc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and clean raw SMC coverage data — load_clean_smc_data","text":"","code":"load_clean_smc_data(data = NULL, path_to_excel = NULL, path_to_rds = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/load_clean_smc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and clean raw SMC coverage data — load_clean_smc_data","text":"data data frame containing raw SMC coverage data (default = NULL). path_to_excel Optional. Path Excel file containing SMC data (default = NULL). path_to_rds Optional. Path RDS file containing SMC data (default = NULL).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_clean_smc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and clean raw SMC coverage data — load_clean_smc_data","text":"cleaned data frame columns: date_start coverage. one row per Year-Month retained (first entry chronologically).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading an Odin Model — load_model","title":"Loading an Odin Model — load_model","text":"Loading Odin Model","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading an Odin Model — load_model","text":"","code":"load_model(name)"},{"path":"https://swisstph.github.io/malclimsim/reference/load_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading an Odin Model — load_model","text":"name name model written Odin DSL loaded. path R file,","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loading an Odin Model — load_model","text":"loaded model used simulation, inference, etc","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/load_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loading an Odin Model — load_model","text":"","code":"load_model(\"model_det_1\") #> Error in odin_preprocess_detect(x, type): '' looks like a filename, but file does not exist"},{"path":"https://swisstph.github.io/malclimsim/reference/make_obs_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Observation Function Configuration — make_obs_config","title":"Create Observation Function Configuration — make_obs_config","text":"Constructs configuration list specifying compare observed modeled data. configuration passed observation likelihood generator function (generate_incidence_comparison()) determines outcomes compared .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_obs_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Observation Function Configuration — make_obs_config","text":"","code":"make_obs_config(   use_monthly = TRUE,   age_group = \"u5\",   include_prev = FALSE,   use_SMC_as_covariate = FALSE,   log_link = FALSE,   include_pop_growth = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/make_obs_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Observation Function Configuration — make_obs_config","text":"use_monthly Logical. TRUE, observation model outputs matched monthly resolution; otherwise, weekly data assumed. age_group Character. One \"u5\", \"o5\", \"sep_ages\", \"total\", \"all_ages\". determines age group(s) included likelihood. include_prev Logical. TRUE, observation function includes prevalence likelihood term. use_SMC_as_covariate Logical. TRUE, incidence adjusted using regression effect (beta_1) SMC coverage. log_link Logical. TRUE, log-link used transform predicted incidence adjusting SMC coverage. FALSE, linear form used. include_pop_growth Logical. TRUE, model-predicted incidence rescaled account population growth using r_C /r_A outputs model.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_obs_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Observation Function Configuration — make_obs_config","text":"named list containing configuration options pass observation likelihood function.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_obs_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Observation Function Configuration — make_obs_config","text":"","code":"obs_config <- make_obs_config(   use_monthly = TRUE,   age_group = \"u5\",   include_prev = FALSE,   use_SMC_as_covariate = TRUE,   log_link = TRUE,   include_pop_growth = TRUE )"},{"path":"https://swisstph.github.io/malclimsim/reference/make_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Parameter Transformation Function — make_transform","title":"Create a Parameter Transformation Function — make_transform","text":"function returns transformation function appends parameter values list. used transforming model parameters format compatible functions.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Parameter Transformation Function — make_transform","text":"","code":"make_transform(temp, c_R_D, SMC, decay, cov_SMC)"},{"path":"https://swisstph.github.io/malclimsim/reference/make_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Parameter Transformation Function — make_transform","text":"temp numeric value representing temperature parameter. c_R_D numeric value representing decay rate. SMC numeric value representing SMC (Scale Mass Concentration). decay numeric value representing decay parameter. cov_SMC numeric value representing covariance SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Parameter Transformation Function — make_transform","text":"function takes vector parameters (theta) combines provided values list.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/make_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Parameter Transformation Function — make_transform","text":"","code":"transform_function <- make_transform(temp = 25, c_R_D = 0.5, SMC = 0.1, decay = 0.03, cov_SMC = 0.05) transformed_params <- transform_function(c(0.1, 0.2, 0.3))"},{"path":"https://swisstph.github.io/malclimsim/reference/max_ll_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","title":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","text":"function extracts optionally prints maximum values log-likelihood log-posterior results MCMC run. useful quickly evaluating fit model.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/max_ll_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","text":"","code":"max_ll_post(results, print_ll = TRUE)"},{"path":"https://swisstph.github.io/malclimsim/reference/max_ll_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","text":"results list containing MCMC results inference run, including coda_pars matrix columns log_likelihood log_posterior. print_ll Boolean. TRUE, maximum log-likelihood log-posterior values printed console (default: TRUE).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/max_ll_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","text":"list two named elements: max_log_likelihood maximum value log-likelihood. max_log_posterior maximum value log-posterior.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/max_ll_post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and Print Maximum Log-Likelihood and Log-Posterior — max_ll_post","text":"","code":"# Simulate results with coda_pars results <- list(   coda_pars = data.frame(     log_likelihood = rnorm(1000, mean = -100, sd = 10),     log_posterior = rnorm(1000, mean = -110, sd = 12)   ) )  # Extract and print maximum log-likelihood and log-posterior max_ll_post(results) #> Maximum Log-Likelihood: -69.22912  #> Maximum Log-Posterior: -73.70755  #> $max_log_likelihood #> [1] -69.22912 #>  #> $max_log_posterior #> [1] -73.70755 #>   # Suppress printing and only return the values max_ll_post(results, print_ll = FALSE) #> $max_log_likelihood #> [1] -69.22912 #>  #> $max_log_posterior #> [1] -73.70755 #>"},{"path":"https://swisstph.github.io/malclimsim/reference/MCMC_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Diagnostic and Summary Plots with Save Options — MCMC_diag","title":"MCMC Diagnostic and Summary Plots with Save Options — MCMC_diag","text":"functionality , now file saving capabilities diagnostics.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/MCMC_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC Diagnostic and Summary Plots with Save Options — MCMC_diag","text":"","code":"MCMC_diag(   results,   params = c(\"trace\", \"gelman\", \"corr\", \"ess\", \"acf\", \"quantiles\", \"acceptance\"),   thin = 1,   save = FALSE,   output_dir = \"mcmc_diagnostics\",   file_prefix = \"mcmc\",   plot_width = 7,   plot_height = 5 )"},{"path":"https://swisstph.github.io/malclimsim/reference/MCMC_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC Diagnostic and Summary Plots with Save Options — MCMC_diag","text":"results MCMC result object. params Diagnostics compute. thin Thinning interval. save Logical; whether save output (default: FALSE). output_dir Directory save outputs (default: \"mcmc_diagnostics\"). file_prefix Optional prefix filenames. plot_width Width plots inches (default: 7). plot_height Height plots inches (default: 5).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/MCMC_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC Diagnostic and Summary Plots with Save Options — MCMC_diag","text":"Named list diagnostics.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/model_date_360.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sequential day indices to dates in a simplified 360-day calendar — model_date_360","title":"Convert sequential day indices to dates in a simplified 360-day calendar — model_date_360","text":"Given start year sequential day indices (1-based), function returns corresponding year, month, day, assuming simplified calendar 12 months per year exactly 30 days . ======= monthThe calendar month (1–12) assuming 30-day months. dayThe day month (1–30).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/model_date_360.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sequential day indices to dates in a simplified 360-day calendar — model_date_360","text":"","code":"model_date_360(day_index, start_year)"},{"path":"https://swisstph.github.io/malclimsim/reference/model_date_360.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sequential day indices to dates in a simplified 360-day calendar — model_date_360","text":"<<<<<<< HEAD day_index Numeric vector sequential day indices starting 1. start_year Numeric scalar specifying initial calendar year day_index = 1. ======= day_index Integer vector day indices (starting 1). Represents number days since start model. start_year Integer. starting calendar year day_index = 1. >>>>>>> development","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/model_date_360.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert sequential day indices to dates in a simplified 360-day calendar — model_date_360","text":"data frame columns: year calendar year corresponding day index. month month number (1 12) corresponding day index. day day number within month (1 30).","code":""},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://swisstph.github.io/malclimsim/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_cases_averted_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cases Averted Across SMC Scenarios (with 95% Credible Intervals) — plot_cases_averted_barplot","title":"Plot Cases Averted Across SMC Scenarios (with 95% Credible Intervals) — plot_cases_averted_barplot","text":"Generates bar plot estimated cases averted SMC pattern/scenario, including 95% credible interval error bars. Supports either: list numeric vectors (posterior samples), list lists mean, lower, upper. Generates bar plot estimated cases averted SMC pattern/scenario, including 95% credible interval error bars. Supports either: list numeric vectors (posterior samples), list lists mean, lower, upper.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_cases_averted_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cases Averted Across SMC Scenarios (with 95% Credible Intervals) — plot_cases_averted_barplot","text":"","code":"plot_cases_averted_barplot(   estimates,   title = \"Estimated Cases Averted for Different SMC Timings\",   x_lab = \"SMC Timing\",   y_lab = \"Mean Cases Averted (95% CI)\",   horizontal = FALSE,   by_year = FALSE,   n_years = 1,   bar_colors = c(`4 rounds (July start)` = \"#0072B2\", `4 rounds (June start)` =     \"#E69F00\", `5 rounds (July start)` = \"#009E73\", `5 rounds (June start)` = \"#D55E00\") )  plot_cases_averted_barplot(   estimates,   title = \"Estimated Cases Averted for Different SMC Timings\",   x_lab = \"SMC Timing\",   y_lab = \"Mean Cases Averted (95% CI)\",   horizontal = FALSE,   by_year = FALSE,   n_years = 1,   bar_colors = c(`4 rounds (July start)` = \"#0072B2\", `4 rounds (June start)` =     \"#E69F00\", `5 rounds (July start)` = \"#009E73\", `5 rounds (June start)` = \"#D55E00\") )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_cases_averted_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cases Averted Across SMC Scenarios (with 95% Credible Intervals) — plot_cases_averted_barplot","text":"estimates named list element either: numeric vector posterior draws, list elements mean, lower, upper. title Plot title. x_lab Label x-axis. y_lab Label y-axis. horizontal Logical. TRUE, produces horizontal bar plot. by_year Logical. TRUE, scales values per-year estimates. n_years Numeric. number years divide by_year = TRUE.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_cases_averted_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cases Averted Across SMC Scenarios (with 95% Credible Intervals) — plot_cases_averted_barplot","text":"ggplot2 bar plot object showing mean cases averted 95% CI. ggplot2 bar plot object showing mean cases averted 95% CI.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MCMC Output to List of Chains for Visualization — plot_chains","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"Converts output multi-chain MCMC run coda::mcmc.list object, separating chains easier visualization diagnostics (e.g., trace plots Gelman-Rubin diagnostics).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"","code":"plot_chains(mcmc_run)"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"mcmc_run object returned mcstate::pmcmc(), containing posterior samples chain column indicating chain IDs.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"mcmc.list object (coda package), element individual chain converted mcmc object.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"function assumes mcmc_run$pars contains posterior samples chain vector mcmc_run$chain specifying chain row belongs .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_chains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert MCMC Output to List of Chains for Visualization — plot_chains","text":"","code":"if (FALSE) { # \\dontrun{ mcmc_chains <- plot_chains(mcmc_run) plot(mcmc_chains)  # Trace plots for all chains } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_compartments.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Compartmental Simulation Results — plot_compartments","title":"Plot Compartmental Simulation Results — plot_compartments","text":"function visualizes output compartmental model simulation options line plots, stacked area plots, faceted visualizations. Users can also plot proportions relative total population.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_compartments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Compartmental Simulation Results — plot_compartments","text":"","code":"plot_compartments(   compart_df,   plot_type = \"line\",   compartments = NULL,   plot_proportion = FALSE,   log_scale = FALSE,   title = \"Epidemic Compartments Over Time\",   color_palette = \"Set2\",   y_label = \"Population Count\" )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_compartments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Compartmental Simulation Results — plot_compartments","text":"compart_df Data frame containing compartments simulation output. plot_type Character string specifying type plot. Options \"line\", \"stacked\", \"facet\". compartments Optional character vector compartments plot (e.g., c(\"SC\", \"IC\")). plot_proportion Logical indicating whether plot proportions relative total population (P column). log_scale Logical indicating whether apply logarithmic scale y-axis. title Character string specifying plot title. color_palette Character string specifying color palette RColorBrewer (default: \"Set2\"). y_label Character string specifying Y-axis label (default: \"Population Count\").","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_compartments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Compartmental Simulation Results — plot_compartments","text":"ggplot object visualizing compartmental data.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_compartments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Compartmental Simulation Results — plot_compartments","text":"","code":"# Basic line plot plot_compartments(compart_df, plot_type = \"line\") #> Error: object 'compart_df' not found  # Stacked area plot with selected compartments plot_compartments(compart_df, plot_type = \"stacked\", compartments = c(\"SC\", \"IC\", \"RA\")) #> Error: object 'compart_df' not found  # Faceted plot with proportions and log scale plot_compartments(compart_df, plot_type = \"line\", plot_proportion = TRUE, log_scale = TRUE, facet = TRUE) #> Error in plot_compartments(compart_df, plot_type = \"line\", plot_proportion = TRUE,     log_scale = TRUE, facet = TRUE): unused argument (facet = TRUE)"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Correlation of MCMC Samples — plot_corr","title":"Plot Correlation of MCMC Samples — plot_corr","text":"function creates correlation plot MCMC samples, showing relationships sampled parameters. upper panels display correlation values, lower panels show smoothed plots parameter relationships.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Correlation of MCMC Samples — plot_corr","text":"","code":"plot_corr(results, title = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Correlation of MCMC Samples — plot_corr","text":"results list: Results inf_run function, containing MCMC samples. title character: Optional title plot.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Correlation of MCMC Samples — plot_corr","text":"GGally ggpairs object visualizing correlation structure MCMC samples.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Correlation of MCMC Samples — plot_corr","text":"","code":"# Example usage: results <- list(   NULL,   matrix(rnorm(5000), ncol = 5, dimnames = list(NULL, c(\"param1\", \"param2\", \"param3\", \"param4\", \"param5\"))) ) correlation_plot <- plot_corr(results, title = \"MCMC Parameter Correlation\") print(correlation_plot)"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_estimate_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Histogram of Estimated Effects with Confidence Interval and Trimmed X-Axis — plot_estimate_distribution","title":"Plot Histogram of Estimated Effects with Confidence Interval and Trimmed X-Axis — plot_estimate_distribution","text":"Plot Histogram Estimated Effects Confidence Interval Trimmed X-Axis","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_estimate_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Histogram of Estimated Effects with Confidence Interval and Trimmed X-Axis — plot_estimate_distribution","text":"","code":"plot_estimate_distribution(   estimates,   x_label = \"Cases Averted\",   title = \"Posterior Distribution of Estimated Cases Averted\",   bins = 30,   ci_level = 0.95 )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_estimate_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Histogram of Estimated Effects with Confidence Interval and Trimmed X-Axis — plot_estimate_distribution","text":"estimates Numeric vector estimates (e.g., cases averted). x_label Label x-axis. title Title plot. bins Number histogram bins (default = 30). ci_level Confidence interval level (default = 0.95).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_estimate_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Histogram of Estimated Effects with Confidence Interval and Trimmed X-Axis — plot_estimate_distribution","text":"ggplot object showing histogram, density, CI lines.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Predictive Check (PPC) — plot_ppc","title":"Plot Posterior Predictive Check (PPC) — plot_ppc","text":"Plot Posterior Predictive Check (PPC)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Predictive Check (PPC) — plot_ppc","text":"","code":"plot_ppc(   ppc_data,   ci_data = NULL,   title = \"Posterior Predictive Check\",   xlab = \"Date\",   ylab = \"Value\",   show_obs = TRUE,   show_best = TRUE,   show_ribbon = TRUE )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Predictive Check (PPC) — plot_ppc","text":"ppc_data Data frame prepare_ppc_data() columns: date_ymd, value, variable, label. ci_data Optional data frame columns: date_ymd, lower, upper, variable. title Plot title. xlab Label x-axis. ylab Label y-axis. show_obs Logical. Whether show observed data. show_best Logical. Whether show deterministic prediction. show_ribbon Logical. Whether show posterior CI ribbon.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Predictive Check (PPC) — plot_ppc","text":"ggplot2 object.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Single Time Series Comparison (Uncomplicated or Severe Cases) — plot_ppc_single","title":"Plot Single Time Series Comparison (Uncomplicated or Severe Cases) — plot_ppc_single","text":"Displays time series optional credible intervals, observed points, consistent legend formatting across scenarios (e.g., /Without SMC, June/July 2023, etc.)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Single Time Series Comparison (Uncomplicated or Severe Cases) — plot_ppc_single","text":"","code":"plot_ppc_single(   plot_data,   ci_data = NULL,   obs_data = NULL,   obs_col = NULL,   plot_title = \"Time Series Comparison\",   xlim = NULL,   ylim = NULL,   severity = \"Uncomplicated\",   scale_severe = 1,   scale_severe_by_year = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Single Time Series Comparison (Uncomplicated or Severe Cases) — plot_ppc_single","text":"plot_data Data frame columns: date_ymd (Date), value (numeric), label ci_data Optional data frame: date_ymd, lower, upper, label obs_data Optional observed data (must date_ymd) obs_col Name obs column obs_data plot_title Title xlim x‐axis limits (Date vector) ylim y‐axis limits (numeric vector) severity Either \"Uncomplicated\" \"Severe\" scale_severe Scaling factor severe cases (used per-year mapping provided) scale_severe_by_year Named vector multipliers year (optional)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_ppc_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Single Time Series Comparison (Uncomplicated or Severe Cases) — plot_ppc_single","text":"ggplot2 plot object","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Default Priors — plot_priors","title":"Plot Default Priors — plot_priors","text":"function plots default priors specified parameters, showing distributions.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Default Priors — plot_priors","text":"","code":"plot_priors(param_inputs, proposal_matrix, params_to_estimate, priors = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Default Priors — plot_priors","text":"param_inputs List input parameters model. proposal_matrix Covariance matrix MCMC proposal distribution. params_to_estimate Character vector specifying parameters' priors plotted. priors List priors plot. NULL, default priors displayed.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Default Priors — plot_priors","text":"ggplot object showing prior distributions specified parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Default Priors — plot_priors","text":"","code":"plot_priors(param_inputs, proposal_matrix, params_to_estimate = c(\"a_R\", \"b_R\", \"qR\", \"z\", \"eff_SMC\", \"phi\", \"size\")) #> Error in initialize_priors(param_inputs, proposal_matrix, params_to_estimate): could not find function \"initialize_priors\""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Residuals of Observed vs Simulated Data — plot_residuals","title":"Plot Residuals of Observed vs Simulated Data — plot_residuals","text":"function creates residual plots observed simulated data, allowing user select specific groups. function creates residual plots observed simulated data, allowing user select specific groups.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Residuals of Observed vs Simulated Data — plot_residuals","text":"","code":"plot_residuals(   observed_df,   simulated_df,   date_column,   groups = c(\"inc_A\", \"inc_C\", \"inc\") )  plot_residuals(   observed_df,   simulated_df,   date_column,   groups = c(\"inc_A\", \"inc_C\", \"inc\") )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Residuals of Observed vs Simulated Data — plot_residuals","text":"observed_df Data frame containing observed data. simulated_df Data frame containing simulated data. date_column name date column data frames. groups character vector specifying groups include plot (inc_A, inc_C, inc).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Residuals of Observed vs Simulated Data — plot_residuals","text":"ggplot object displaying residual plots. ggplot object displaying residual plots.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Residuals of Observed vs Simulated Data — plot_residuals","text":"","code":"residual_plot <- plot_residuals(obs_cases, simulated_df, date_column = \"date_ymd\", groups = c(\"inc_A\", \"inc_C\")) #> Error: object 'simulated_df' not found residual_plot <- plot_residuals(obs_cases, simulated_df, date_column = \"date_ymd\", groups = c(\"inc_A\", \"inc_C\")) #> Error: object 'simulated_df' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_time_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Time Series of Malaria Incidence (Raw and Transformed) — plot_time_series","title":"Plot Time Series of Malaria Incidence (Raw and Transformed) — plot_time_series","text":"function creates time series plots malaria incidence, optionally including transformed incidence values (e.g., observation models). Also supports plotting climate covariates, faceting overlay options.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_time_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Time Series of Malaria Incidence (Raw and Transformed) — plot_time_series","text":"","code":"plot_time_series(   results,   met = NULL,   plot_title = \"Malaria Incidence Time Series\",   incidence_y_label = \"Malaria Incidence\",   climate_y_label = \"Climate\",   climate_facet = FALSE,   select_incidence = c(\">=5\", \"<5\", \"total\"),   select_climate = c(\"temp\", \"cumrain\"),   incidence_colors = c(`>=5` = \"blue\", `<5` = \"red\", total = \"green\", `transformed_>=5` =     \"skyblue\", `transformed_<5` = \"orange\", transformed_total = \"darkgreen\"),   climate_colors = c(temp = \"orange\", cumrain = \"purple\"),   climate_alpha = 0.7,   base_size = 15 )"},{"path":"https://swisstph.github.io/malclimsim/reference/plot_time_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Time Series of Malaria Incidence (Raw and Transformed) — plot_time_series","text":"results data frame data_sim() containing columns like inc_C, inc_A, inc_C_transformed, inc_A_transformed, date_ymd. met Optional data frame climate covariates. plot_title Title plot. incidence_y_label Y-axis label incidence. climate_y_label Y-axis label climate plot. climate_facet Whether facet incidence climate plots. select_incidence Vector incidence types include. Options: \"<5\", \">=5\", \"total\", \"transformed_<5\", \"transformed_>=5\", \"transformed_total\". select_climate Climate vars include (e.g., \"temp\", \"cumrain\"). incidence_colors Named vector colors incidence types. climate_colors Named vector colors climate vars. climate_alpha Transparency climate lines. base_size Base font size.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/plot_time_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Time Series of Malaria Incidence (Raw and Transformed) — plot_time_series","text":"ggplot grid ggplots","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/post_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Posterior Distributions of Estimated Parameters — post_plot","title":"Plot Posterior Distributions of Estimated Parameters — post_plot","text":"Generates density histogram plots estimated parameter MCMC output, annotated quantiles optional true values available. helps users visualize posterior distribution model parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/post_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Posterior Distributions of Estimated Parameters — post_plot","text":"","code":"post_plot(   results_list,   params_to_estimate,   dim_plot,   show_true = TRUE,   true_value = NULL,   show_prior = FALSE,   prior_n = 10000,   title = \"\",   run_labels = NULL,   plot_type = \"histogram\" )"},{"path":"https://swisstph.github.io/malclimsim/reference/post_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Posterior Distributions of Estimated Parameters — post_plot","text":"results_list list containing MCMC results multiple runs. element contain posterior samples. params_to_estimate character vector parameter names include plot. dim_plot numeric vector length 2 specifying number rows columns arranging plots. show_true Logical; TRUE, true parameter values indicated plots provided. true_value named numeric vector true values parameters (optional). Must match params_to_estimate used. show_prior Logical; TRUE, prior distributions overlaid plots. prior_n Integer; number points sample prior distribution. title character string specifying title entire plot layout (optional). run_labels character vector specifying labels MCMC run (optional). Must match length results_list. plot_type character string specifying type plot: \"histogram\" \"density\".","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/post_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Posterior Distributions of Estimated Parameters — post_plot","text":"combined plot object displaying posterior distributions parameter. plot includes optional lines true values show_true = TRUE, prior distributions show_prior = TRUE.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/post_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Posterior Distributions of Estimated Parameters — post_plot","text":"","code":"# Example usage: params_to_estimate <- c(\"param1\", \"param2\") dim_plot <- c(1, 2)  # Arrange in 1 row, 2 columns post_plot(results_list, params_to_estimate, dim_plot, show_prior = TRUE,           run_labels = c(\"Experiment A\", \"Experiment B\"), plot_type = \"density\") #> Error: object 'results_list' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/prepare_ppc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Posterior Simulations, Deterministic Prediction, and Observed Data for PPC Plotting — prepare_ppc_data","title":"Combine Posterior Simulations, Deterministic Prediction, and Observed Data for PPC Plotting — prepare_ppc_data","text":"Combine Posterior Simulations, Deterministic Prediction, Observed Data PPC Plotting","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/prepare_ppc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Posterior Simulations, Deterministic Prediction, and Observed Data for PPC Plotting — prepare_ppc_data","text":"","code":"prepare_ppc_data(ci_data, best_df, obs_df, sim_var, obs_var)"},{"path":"https://swisstph.github.io/malclimsim/reference/prepare_ppc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Posterior Simulations, Deterministic Prediction, and Observed Data for PPC Plotting — prepare_ppc_data","text":"ci_data Data frame posterior median credible intervals. Must include date_ymd, variable, median, lower, upper. best_df Long-format data frame deterministic model run, including columns date_ymd, variable, value. obs_df Wide-format observed data columns date_ymd obs_var. sim_var Character. Name variable used simulated predictions (e.g., \"inc_C_transformed\"). obs_var Character. Name observed variable obs_df (e.g., \"inc_C\").","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/prepare_ppc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Posterior Simulations, Deterministic Prediction, and Observed Data for PPC Plotting — prepare_ppc_data","text":"tibble combining observed, deterministic, simulated prediction data, ready plot_ppc().","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/print_observation_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Configuration for Observation Function — print_observation_structure","title":"Print Configuration for Observation Function — print_observation_structure","text":"Utility confirm current likelihood settings (time unit, age group, etc.).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/print_observation_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Configuration for Observation Function — print_observation_structure","text":"","code":"print_observation_structure(   month,   age_for_inf,   include_prev,   use_beta_adjustment = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/process_climate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — process_climate_data","title":"Title — process_climate_data","text":"Title","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/process_climate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — process_climate_data","text":"","code":"process_climate_data(   lon,   lat,   years,   temp_path,   rain_path,   months_30_days = TRUE,   save = FALSE,   path_to_data = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/process_climate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — process_climate_data","text":"lon longitude coordinate lat latitude coordinate years vector containing year analysis temp_path path temperature data saved save_climate_data rain_path path rainfall data saved save_climate_data path_to_data path directory processed climate data stored","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/process_climate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — process_climate_data","text":"data frame","code":""},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"Ensures rows matrix MCMC start values ordered consistently names param_priors list. useful passing initial values MCMC routine expects specific parameter order.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"","code":"reorder_start_values(start_values, param_priors)"},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"start_values matrix initial parameter values MCMC, row corresponds parameter column chain initialization. row names parameter names. param_priors named list prior specifications (e.g., used mcstate::pmcmc_parameters$new()), names correspond parameter names.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"reordered matrix start values row order matching order names param_priors. Parameters missing start_values dropped (warning optionally).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"function matches parameter names start_values param_priors, reorders accordingly. parameters present param_priors missing start_values ignored returned matrix.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/reorder_start_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder MCMC Start Values to Match Prior Specification — reorder_start_values","text":"","code":"start_vals <- matrix(c(0.1, 0.2, 0.3, 0.4), nrow = 2, dimnames = list(c(\"beta\", \"gamma\"), NULL)) priors <- list(gamma = list(min = 0, max = 1, prior = dunif),                beta = list(min = 0, max = 1, prior = dunif)) reordered <- reorder_start_values(start_vals, priors)"},{"path":"https://swisstph.github.io/malclimsim/reference/return_default_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Default Priors Used for Inference Procedure — return_default_priors","title":"Return Default Priors Used for Inference Procedure — return_default_priors","text":"function returns list default priors used inference procedure. parameter associated prior distribution, initial value, range constraints.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/return_default_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Default Priors Used for Inference Procedure — return_default_priors","text":"","code":"return_default_priors()"},{"path":"https://swisstph.github.io/malclimsim/reference/return_default_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Default Priors Used for Inference Procedure — return_default_priors","text":"list element corresponds parameter. parameter element list containing: initial Initial value parameter. min Minimum value parameter. max Maximum value parameter. prior function defining prior distribution parameter, returning log probability density.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/return_default_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Default Priors Used for Inference Procedure — return_default_priors","text":"","code":"# Get default priors priors <- return_default_priors()  # Access the prior for a specific parameter phi_prior <- priors$phi print(phi_prior) #> NULL  # Evaluate the prior for phi at a specific value phi_value <- 0.5 log_prior_density <- phi_prior$prior(phi_value) #> Error: attempt to apply non-function print(log_prior_density) #> Error: object 'log_prior_density' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC Simulation — run_mcmc_simulation","title":"Run MCMC Simulation — run_mcmc_simulation","text":"Executes MCMC simulation using mcstate::pmcmc() two control stages. first run typically used adapt proposal distribution, second run performs full MCMC sampling.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC Simulation — run_mcmc_simulation","text":"","code":"run_mcmc_simulation(mcmc_pars, filter, start_values, control1, control2)"},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC Simulation — run_mcmc_simulation","text":"mcmc_pars MCMC parameter object (e.g., generated mcstate::pmcmc_parameters()). filter particle filter object, typically created using mcstate::particle_filter(). start_values Initial values MCMC chains. control1 pmcmc_control object initial adaptation stage. control2 pmcmc_control object full MCMC run.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC Simulation — run_mcmc_simulation","text":"MCMC object (class mcstate_pmcmc) containing posterior samples diagnostics.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","title":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","text":"function runs epidemiological model using different parameter sets sampled MCMC posterior.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","text":"","code":"run_mcmc_simulations(   model,   param_inputs,   param_samples,   start_date,   end_date,   prewarm_years = 2,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","text":"model function representing epidemiological model. param_samples matrix parameter sets sampled MCMC posterior. start_date simulation start date. end_date simulation end date. prewarm_years number years prewarm model. days_per_year number days simulation year.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","text":"list data frames containing simulation results sampled parameter set.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_mcmc_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Model Simulations for Each Parameter Set — run_mcmc_simulations","text":"","code":"simulations <- run_mcmc_simulations(model, sampled_params, \"2014-01-01\", \"2022-12-31\", 2, 360) #> Error in 1:nrow(param_samples): argument of length 0"},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulations_from_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","title":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","text":"function runs simulation model multiple times, time using different row sampled parameter matrix (e.g., posterior draws). used generate predictive simulations counterfactual scenarios based parameter uncertainty. simulation returns output data_sim() function, integrates optional transformations covariates.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulations_from_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","text":"","code":"run_simulations_from_samples(   model,   param_inputs,   param_samples,   start_date,   end_date,   prewarm_years = 2,   mu_transform_C = NULL,   mu_transform_A = NULL,   covariate_matrix = NULL,   month = TRUE,   noise = FALSE )"},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulations_from_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","text":"model simulation model function (e.g., compartmental ODE model) takes parameter list returns state trajectories. param_inputs named list baseline input parameters. serve default values updating row param_samples. param_samples matrix data frame sampled parameter values, row corresponds unique parameter set simulate. start_date, end_date simulation date range Date character objects coercible Date. Typically, define time window prediction prewarming. prewarm_years Number years start_date used prewarming model (e.g., reach equilibrium load past covariates). Defaults 2. mu_transform_C Optional function transform underlying mu incidence predicted count (e.g., logistic log link cluster C). mu_transform_A Optional transformation function cluster (used). covariate_matrix Optional covariate matrix used transforming incidence (e.g., climate-driven models spatial heterogeneity). month Logical. TRUE, output aggregated indexed monthly (rather week day). noise Logical. TRUE, draws simulated incidence negative binomial distribution using size_1 dispersion parameter.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulations_from_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","text":"list data frames, containing simulation run structure output data_sim(). list one element per row param_samples.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulations_from_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Simulations from Sampled Parameter Sets — run_simulations_from_samples","text":"","code":"if (FALSE) { # \\dontrun{ sim_list <- run_simulations_from_samples(   model = malaria_model,   param_inputs = base_params,   param_samples = posterior_draws,   start_date = \"2016-01-01\",   end_date = \"2022-12-31\",   mu_transform_C = logit_transform,   covariate_matrix = climate_covariates,   noise = TRUE ) } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"Extends time-varying covariate inputs runs model pre-warm period allow system stabilization target simulation window.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"","code":"run_simulation_with_prewarm(   model,   param_inputs,   dates,   prewarm_years = 2,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"model model object used simulation (compatible data_sim()). param_inputs list model parameters, including time-varying covariates. dates vector two dates: start end target simulation window (Date string \"YYYY-MM-DD\" format). prewarm_years Integer; number years pre-warm model actual simulation window. Defaults 2. days_per_year Integer; number time steps per year (typically 360 365). Defaults 360.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"data frame simulated results filtered include dates original start_date onward.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"Time-varying parameters extended backward time repeating first year's values prewarm_years. simulation run extended window, pre-warm results discarded avoid initialization artifacts.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/run_simulation_with_prewarm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Model Simulation with Pre-Warm Period — run_simulation_with_prewarm","text":"","code":"if (FALSE) { # \\dontrun{ sim_results <- run_simulation_with_prewarm(   model = malaria_model,   param_inputs = parameters,   dates = c(\"2020-01-01\", \"2022-12-31\"),   prewarm_years = 2 ) } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/sample_mcmc_steps.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","title":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","text":"function randomly samples specified number parameter sets MCMC posterior distribution.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_mcmc_steps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","text":"","code":"sample_mcmc_steps(mcmc_results, num_samples)  sample_mcmc_steps(mcmc_results, num_samples)"},{"path":"https://swisstph.github.io/malclimsim/reference/sample_mcmc_steps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","text":"mcmc_results matrix data frame containing MCMC posterior samples parameters. num_samples Number samples draw.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_mcmc_steps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","text":"matrix sampled parameter sets. matrix sampled parameter sets.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_mcmc_steps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Parameter Sets from MCMC Results — sample_mcmc_steps","text":"","code":"sampled_params <- sample_mcmc_steps(MCMC_results_2_3$mcmc_run$pars, 100) #> Error: object 'MCMC_results_2_3' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/sample_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Parameters from MCMC Results — sample_params","title":"Sample Parameters from MCMC Results — sample_params","text":"function randomly selects n rows MCMC parameter output extracts parameter values row.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Parameters from MCMC Results — sample_params","text":"","code":"sample_params(results, n)"},{"path":"https://swisstph.github.io/malclimsim/reference/sample_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Parameters from MCMC Results — sample_params","text":"results MCMC results object containing parameter samples. n number samples extract.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Parameters from MCMC Results — sample_params","text":"list named vectors, containing one set sampled parameters.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sample_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Parameters from MCMC Results — sample_params","text":"","code":"# Assuming `results` contains the MCMC output sampled_parameters <- sample_params(results, 100) #> Error: object 'results' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/save_climate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","title":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","text":"Saving Climate Data ERA5 CHIRTSdaily","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_climate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","text":"","code":"save_climate_data(   lon,   lat,   years,   path_to_data,   rain = TRUE,   temp = TRUE,   temp_file_name = NULL,   rain_file_name = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/save_climate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","text":"lon longitude coordinate lat latitude coordinate years vector containing year data downloaded path_to_data folder data saved rain boolean CHIRPS data downloaded saved temp boolean ERA5 data downloaded saved temp_file_name character file name stored temperature data (ERA5) rain_file_name character file name stored rainfall data (CHIRPS)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_climate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","text":"nothing","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_climate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saving Climate Data From ERA5 and CHIRTSdaily — save_climate_data","text":"","code":"years <- 2014:2023 lon <- 17.9 lat <- 8.3 path_to_data <- \"C:/Users/putnni/Documents/r-packages/data/\" save_climate_data(lon, lat, years, path_to_data) #> Requesting data to the cds service with username ecmwfr #> Superclass ecmwfr_service has cloneable=FALSE, but subclass ecmwfr_ds has cloneable=TRUE. A subclass cannot be cloneable when its superclass is not cloneable, so cloning will be disabled for ecmwfr_ds. #> - staging data transfer at url endpoint or request id: #>   eeaf129a-d834-43a5-9036-6a2cce7f248f #>   on server: https://cds.climate.copernicus.eu/api #> - timeout set to 1.0 hours #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #> - polling server ...   #> \\ polling server ...   #> | polling server ...   #> / polling server ...   #>    file ready to download...            #>  #> Downloading file #> Error in curl::curl_fetch_disk(url, x$path, handle = handle): Failed to open file C:\\Users\\putnni\\Documents\\r-packages\\data\\ecmwfr_6aec4a1274bc."},{"path":"https://swisstph.github.io/malclimsim/reference/save_era5.html","id":null,"dir":"Reference","previous_headings":"","what":"Save ERA5 Reanalysis Data — save_era5","title":"Save ERA5 Reanalysis Data — save_era5","text":"Downloads ERA5 reanalysis data specified years saves specified path.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_era5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save ERA5 Reanalysis Data — save_era5","text":"","code":"save_era5(years, path, file_name = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/save_era5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save ERA5 Reanalysis Data — save_era5","text":"years vector years data downloaded (e.g., c(2000, 2001)). path string specifying path downloaded data file stored.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_era5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save ERA5 Reanalysis Data — save_era5","text":"path downloaded NetCDF file.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_era5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save ERA5 Reanalysis Data — save_era5","text":"","code":"if (FALSE) { # \\dontrun{ save_era5(years = c(2000, 2001), path = \"./data\") } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/save_plot_dynamic.html","id":null,"dir":"Reference","previous_headings":"","what":"Save ggplot with Dynamic Filename — save_plot_dynamic","title":"Save ggplot with Dynamic Filename — save_plot_dynamic","text":"Utility save plots consistent naming scheme.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_plot_dynamic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save ggplot with Dynamic Filename — save_plot_dynamic","text":"","code":"save_plot_dynamic(plot_obj, filename_stub, out_dir, width = 10, height = 6)"},{"path":"https://swisstph.github.io/malclimsim/reference/save_plot_dynamic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save ggplot with Dynamic Filename — save_plot_dynamic","text":"plot_obj ggplot object. filename_stub Name without extension. out_dir Directory save . width Width inches. height Height inches.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_plot_dynamic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save ggplot with Dynamic Filename — save_plot_dynamic","text":"Path saved file (invisible).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_scenario_summary_tex.html","id":null,"dir":"Reference","previous_headings":"","what":"Save LaTeX Table of Scenario Estimates — save_scenario_summary_tex","title":"Save LaTeX Table of Scenario Estimates — save_scenario_summary_tex","text":"Writes LaTeX-formatted table summarizing scenario estimates file.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_scenario_summary_tex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save LaTeX Table of Scenario Estimates — save_scenario_summary_tex","text":"","code":"save_scenario_summary_tex(   summary_estimates,   out_dir,   file_name = \"scenario_summary.tex\" )"},{"path":"https://swisstph.github.io/malclimsim/reference/save_scenario_summary_tex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save LaTeX Table of Scenario Estimates — save_scenario_summary_tex","text":"summary_estimates data frame columns: Scenario, Lower_2.5, Median, Upper_97.5. out_dir Directory save LaTeX file. file_name Name .tex file (default = \"scenario_summary.tex\").","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/save_scenario_summary_tex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save LaTeX Table of Scenario Estimates — save_scenario_summary_tex","text":"return value. Side effect: saves LaTeX file disk.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_eff_smc_to_zero.html","id":null,"dir":"Reference","previous_headings":"","what":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","title":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","text":"function takes list model parameters sets eff_SMC parameter zero simulate scenario without Seasonal Malaria Chemoprevention (SMC).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_eff_smc_to_zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","text":"","code":"set_eff_smc_to_zero(param_inputs)"},{"path":"https://swisstph.github.io/malclimsim/reference/set_eff_smc_to_zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","text":"param_inputs list parameter values model.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_eff_smc_to_zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","text":"list eff_SMC parameter set zero.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_eff_smc_to_zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set eff_SMC Parameter to Zero — set_eff_smc_to_zero","text":"","code":"no_smc_params <- set_eff_smc_to_zero(param_inputs) #> Error: object 'param_inputs' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/set_smc_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Set SMC Coverage Level — set_smc_coverage","title":"Set SMC Coverage Level — set_smc_coverage","text":"function takes list model parameters sets cov_SMC parameter user-defined level.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_smc_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set SMC Coverage Level — set_smc_coverage","text":"","code":"set_smc_coverage(param_inputs, coverage_level = 1)"},{"path":"https://swisstph.github.io/malclimsim/reference/set_smc_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set SMC Coverage Level — set_smc_coverage","text":"param_inputs list parameter values model. coverage_level numeric value (0 1) representing desired coverage level. Default 1 (100% coverage).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_smc_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set SMC Coverage Level — set_smc_coverage","text":"list cov_SMC parameter updated specified coverage level.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/set_smc_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set SMC Coverage Level — set_smc_coverage","text":"","code":"full_coverage_params <- set_smc_coverage(param_inputs, coverage_level = 1) #> Error: object 'param_inputs' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_best.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the model once at the maximum-posterior parameter set (deterministic) — simulate_best","title":"Run the model once at the maximum-posterior parameter set (deterministic) — simulate_best","text":"Run model maximum-posterior parameter set (deterministic)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_best.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the model once at the maximum-posterior parameter set (deterministic) — simulate_best","text":"","code":"simulate_best(model, param_inputs, best_params, start_date, end_date, ...)"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_best.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the model once at the maximum-posterior parameter set (deterministic) — simulate_best","text":"model dust odin model object. param_inputs Named list baseline inputs. best_params Named vector list best-fit parameters. start_date Date string start sim window. end_date Date string end sim window. ... Additional args passed data_sim().","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_best.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the model once at the maximum-posterior parameter set (deterministic) — simulate_best","text":"data.frame long form date_ymd, variable, value.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Models Using Sampled Parameters — simulate_models","title":"Simulate Models Using Sampled Parameters — simulate_models","text":"function runs n model simulations, using different set parameters sampled MCMC results.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Models Using Sampled Parameters — simulate_models","text":"","code":"simulate_models(   model,   param_inputs,   sampled_params,   start_date,   end_date,   prewarm_years = 2,   days_per_year = 360 )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Models Using Sampled Parameters — simulate_models","text":"model model function simulate . param_inputs initial list parameters update simulation. sampled_params list parameter sets use simulation. start_date start date simulation. end_date end date simulation.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Models Using Sampled Parameters — simulate_models","text":"list data frames, containing simulation output different parameter set.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Models Using Sampled Parameters — simulate_models","text":"","code":"# Assuming `sampled_params` is a list of sampled parameter sets simulations <- simulate_models(model = data_sim, param_inputs = param_inputs,                                sampled_params = sampled_params,                                start_date = \"2021-01-01\", end_date = \"2021-12-31\") #> Error: object 'param_inputs' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"function runs compartmental model simulation specified district, extracts yearly prevalence estimates, returns summarized data frame.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"","code":"simulate_prevalence_for_district(   model,   results,   start_date,   end_date,   district_name,   param_inputs = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"model epidemiological model object used simulation. results list containing MCMC model fitting results district, including parameter estimates prior information. start_date character string Date object specifying start date simulation (e.g., \"2014-01-01\"). end_date character string Date object specifying end date simulation (e.g., \"2022-12-31\"). district_name character string specifying name district. param_inputs named vector parameters corresponding values. NULL, uses parameters maximize likelihood results.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"data frame containing yearly average prevalence estimates given district. data frame includes columns year, various prevalence metrics (e.g., prev_total_with_R, prev_C_with_R), corresponding District name.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"function first extracts maximum likelihood parameters model fitting results. updates parameter inputs best estimates. model simulated specified district time period. output aggregated yearly averages prevalence metrics. district name appended final data frame facilitate later merging.","code":""},{"path":[]},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_prevalence_for_district.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate and Extract Yearly Prevalence Estimates for a District — simulate_prevalence_for_district","text":"","code":"# Example usage for the Koumra district start_date <- \"2014-01-01\" end_date <- \"2022-12-31\" koumra_prev <- simulate_prevalence_for_district(model_simp, koumra_results, start_date, end_date, \"Koumra\") #> Error: object 'koumra_results' not found  # View output head(koumra_prev) #> Error: object 'koumra_prev' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_without_smc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Model Without SMC — simulate_without_smc","title":"Simulate Model Without SMC — simulate_without_smc","text":"function simulates model eff_SMC set zero, representing scenario without SMC intervention.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_without_smc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Model Without SMC — simulate_without_smc","text":"","code":"simulate_without_smc(   results,   start_date,   end_date,   model,   mu_transform_C = NULL,   mu_transform_A = NULL,   covariate_matrix = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_without_smc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Model Without SMC — simulate_without_smc","text":"results MCMC results object containing parameter samples. start_date start date simulation. end_date end date simulation. model model function simulate .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_without_smc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Model Without SMC — simulate_without_smc","text":"data frame containing simulation output without SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_full_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","title":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","text":"function simulates model cov_SMC set user-defined level (default 100% coverage).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_full_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","text":"","code":"simulate_with_full_coverage(   results,   start_date,   end_date,   model,   coverage_level = 1 )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_full_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","text":"results MCMC results object containing parameter samples. start_date start date simulation. end_date end date simulation. model model function simulate . coverage_level numeric value 0 1 desired SMC coverage. Default 1 (100% coverage).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_full_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","text":"data frame containing simulation output full specified SMC coverage.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_full_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Model with Full SMC Coverage — simulate_with_full_coverage","text":"","code":"sim_full_coverage <- simulate_with_full_coverage(results, start_date, end_date, model, coverage_level = 1) #> Error: object 'results' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_max_posterior_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","title":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","text":"function takes MCMC results, extracts parameter values corresponding maximum log posterior, updates parameter list, runs simulation model. Additionally, function includes pre-warm period, simulation starts earlier specified start_date allow model stabilize output period.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_max_posterior_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","text":"","code":"simulate_with_max_posterior_params(   results,   start_date,   end_date,   model,   prewarm_years = 2,   days_per_year = 360,   mu_transform_A = NULL,   mu_transform_C = NULL,   covariate_matrix = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_max_posterior_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","text":"results MCMC results object containing parameter samples, including log_posterior. start_date start date desired simulation output, Date object character string. end_date end date simulation, Date object character string. model model function simulate . function accept parameters, start/end dates, additional arguments simulation. prewarm_years Integer, number years simulate start_date pre-warm period (default 2 years). days_per_year Integer, number days year simulation (default 360 days).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_max_posterior_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","text":"data frame containing simulation results, filtered include period start_date end_date.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_max_posterior_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Model Using Parameters with Maximum Log Posterior — simulate_with_max_posterior_params","text":"","code":"# Assuming `results` contains the MCMC output, and `data_sim` is the simulation function simulation_output <- simulate_with_max_posterior_params(   results = results,   start_date = \"2021-01-01\",   end_date = \"2021-12-31\",   model = data_sim,   prewarm_years = 3,   days_per_year = 360 ) #> Error: object 'results' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_smc.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Model with SMC — simulate_with_smc","title":"Simulate Model with SMC — simulate_with_smc","text":"function simulates model using parameters maximize log posterior, include SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_smc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Model with SMC — simulate_with_smc","text":"","code":"simulate_with_smc(   results,   start_date,   end_date,   model,   mu_transform_C = NULL,   mu_transform_A = NULL,   covariate_matrix = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_smc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Model with SMC — simulate_with_smc","text":"results MCMC results object containing parameter samples. start_date start date simulation. end_date end date simulation. model model function simulate .","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/simulate_with_smc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Model with SMC — simulate_with_smc","text":"data frame containing simulation output SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate the Malaria Model Over Time — sim_mod","title":"Simulate the Malaria Model Over Time — sim_mod","text":"Runs stochastic malaria transmission model using odin-generated model object, storing state outputs across multiple time steps particles.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate the Malaria Model Over Time — sim_mod","text":"","code":"sim_mod(odin_mod, pars, time_start, n_particles, sim_time)"},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate the Malaria Model Over Time — sim_mod","text":"odin_mod odin model object (usually created odin::odin()), representing compiled malaria model. pars named list parameters pass model. time_start Numeric value specifying starting time (e.g., 0). n_particles Integer; number particles used stochastic simulation (.e., number replicate simulations). sim_time Integer; total number time steps (days) simulate.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate the Malaria Model Over Time — sim_mod","text":"list two elements: x 3D array simulation results dimensions [state, particle, time]. model odin model object simulation (can used inspect internals).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate the Malaria Model Over Time — sim_mod","text":"model initialized using odin_mod$new() constructor, model$run(t) called time step t advance simulation.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/sim_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate the Malaria Model Over Time — sim_mod","text":"","code":"if (FALSE) { # \\dontrun{ mod <- odin::odin(\"malaria_model.R\") results <- sim_mod(mod, pars = list(beta = 0.2), time_start = 0, n_particles = 10, sim_time = 100) } # }"},{"path":"https://swisstph.github.io/malclimsim/reference/smc_schedule_from_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","title":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","text":"function generates schedule coverage values given time period, filling missing values previous non-zero coverage applying decay calculation.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/smc_schedule_from_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","text":"","code":"smc_schedule_from_data(smc_cov, months_30_days, years, const = -0.1806)"},{"path":"https://swisstph.github.io/malclimsim/reference/smc_schedule_from_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","text":"smc_cov data frame containing coverage data. least two columns: date_start: date coverage value. coverage: coverage value corresponding date. months_30_days Logical; whether generate dates 30-day month format (defaults FALSE). TRUE, sequence dates follow 360-day year 12 months 30 days . years numeric vector containing range years generate schedule (e.g., c(2014, 2022)). const numeric value representing decay constant used decay calculation (default -0.1806).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/smc_schedule_from_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","text":"data frame containing following columns: dates: sequence dates beginning end time period. SMC: binary value indicating presence (1) absence (0) coverage date. cov: coverage value date. decay: decay values calculated date based SMC decay constant.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/smc_schedule_from_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a schedule of coverage values for a given period with decay — smc_schedule_from_data","text":"","code":"smc_schedule_from_data(smc_cov = smc_cov_data, months_30_days = FALSE, years = c(2014, 2022)) #> Error: object 'smc_cov_data' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","title":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","text":"function calculates median confidence intervals selected compartments simulation results.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","text":"","code":"summarize_simulations(simulation_results, ci_level = 0.95, variables = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","text":"simulation_results list data frames containing model outputs different parameter sets. ci_level confidence level (e.g., 0.95 95% confidence intervals). variables character vector specifying compartments summarize (e.g., c(\"SC\", \"EC\", \"prev_total_with_R\")). NULL, compartments summarized.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","text":"data frame median values confidence intervals selected compartments time step.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Simulation Results with Confidence Intervals and Selective Variables — summarize_simulations","text":"","code":"# Summarize SC and EC compartments summary_df <- summarize_simulations(simulations, ci_level = 0.95, variables = c(\"SC\", \"EC\")) #> Error: object 'simulations' not found  # Summarize all compartments summary_df <- summarize_simulations(simulations, ci_level = 0.95) #> Error: object 'simulations' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulation_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Long Format Data for Simulated Posterior Median and CI — summarize_simulation_ci","title":"Create Long Format Data for Simulated Posterior Median and CI — summarize_simulation_ci","text":"Create Long Format Data Simulated Posterior Median CI","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulation_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Long Format Data for Simulated Posterior Median and CI — summarize_simulation_ci","text":"","code":"summarize_simulation_ci(simulations, variables, ci_level = 0.95)"},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulation_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Long Format Data for Simulated Posterior Median and CI — summarize_simulation_ci","text":"simulations List simulation data frames. variables Character vector variable names. ci_level Confidence interval width (e.g., 0.95).","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/summarize_simulation_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Long Format Data for Simulated Posterior Median and CI — summarize_simulation_ci","text":"Data frame long format.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_inf_stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Update proposal matrix, start values, and MCMC settings for next stage — update_inf_stage","title":"Update proposal matrix, start values, and MCMC settings for next stage — update_inf_stage","text":"Update proposal matrix, start values, MCMC settings next stage","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_inf_stage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update proposal matrix, start values, and MCMC settings for next stage — update_inf_stage","text":"","code":"update_inf_stage(   results_obj,   proposal_matrix,   param_names,   S_prev = 3000,   draw_n = 4,   shrink = 0.8,   stage,   n_steps = NULL )"},{"path":"https://swisstph.github.io/malclimsim/reference/update_inf_stage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update proposal matrix, start values, and MCMC settings for next stage — update_inf_stage","text":"results_obj Result object returned inf_run (MCMC traces) proposal_matrix Current proposal variance matrix param_names Character vector parameter names (rownames proposal_matrix) S_prev Integer: number samples use variance-covariance extraction draw_n Integer: number random draws new start values per chain shrink Numeric: shrinkage factor bounds (e.g. 0.8 retains 80% interval) stage Character: stage pull create_mcmc_params() n_steps Integer NULL: NULL, overrides control_params$n_steps","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_inf_stage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update proposal matrix, start values, and MCMC settings for next stage — update_inf_stage","text":"list elements: proposal_matrix : updated proposal variance matrix start_values    : matrix new start values (chains x parameters) adaptive_params : list adaptive settings stage control_params  : list control settings stage (n_steps possibly overridden)","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_param_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Parameters in List with Values from Extracted Vector — update_param_list","title":"Update Parameters in List with Values from Extracted Vector — update_param_list","text":"function updates values list parameters (e.g., param_inputs) values named vector parameters obtained MCMC run.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_param_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Parameters in List with Values from Extracted Vector — update_param_list","text":"","code":"update_param_list(param_inputs, param_values)"},{"path":"https://swisstph.github.io/malclimsim/reference/update_param_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Parameters in List with Values from Extracted Vector — update_param_list","text":"param_inputs list parameters element named parameter. param_values named vector parameters, typically maximum log posterior, update values param_inputs.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_param_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Parameters in List with Values from Extracted Vector — update_param_list","text":"updated list parameters replaced values matches exist.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_param_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Parameters in List with Values from Extracted Vector — update_param_list","text":"","code":"# Assuming `param_inputs` is a list of parameters and `params_at_max_posterior` # is a named vector with values to update updated_params <- update_param_list(param_inputs, params_at_max_posterior) #> Error: object 'params_at_max_posterior' not found"},{"path":"https://swisstph.github.io/malclimsim/reference/update_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Default Priors — update_priors","title":"Update Default Priors — update_priors","text":"function allows user update default priors new values.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Default Priors — update_priors","text":"","code":"update_priors(   param_inputs,   proposal_matrix,   params_to_estimate,   priors = NULL,   new_priors )"},{"path":"https://swisstph.github.io/malclimsim/reference/update_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Default Priors — update_priors","text":"priors List priors update. Default NULL, means using default priors. new_priors named list new prior specifications replace defaults.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/update_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Default Priors — update_priors","text":"list containing updated priors.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/validate_smc_climate_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SMC and Climate for Lagged Alignment — validate_smc_climate_alignment","title":"Validate SMC and Climate for Lagged Alignment — validate_smc_climate_alignment","text":"Ensures: SMC dates continuous daily gaps. Climate dates start earlier (SMC_start − lag_days) cover SMC_end gaps. intended lag_days, every SMC_date − lag_days exists climate.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/validate_smc_climate_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SMC and Climate for Lagged Alignment — validate_smc_climate_alignment","text":"","code":"validate_smc_climate_alignment(smc_df, clim_df, lag_days)"},{"path":"https://swisstph.github.io/malclimsim/reference/validate_smc_climate_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SMC and Climate for Lagged Alignment — validate_smc_climate_alignment","text":"smc_df Data.frame Date column dates. clim_df Data.frame Date column dates. lag_days Integer ≥ 0: days Climate lags behind SMC.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/validate_smc_climate_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SMC and Climate for Lagged Alignment — validate_smc_climate_alignment","text":"Invisibly TRUE checks pass; stops error otherwise.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/view_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"View Default Priors — view_priors","title":"View Default Priors — view_priors","text":"function displays default priors details, including initial values, min/max bounds, prior distributions.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/view_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View Default Priors — view_priors","text":"","code":"view_priors(param_inputs, proposal_matrix, params_to_estimate, priors = NULL)"},{"path":"https://swisstph.github.io/malclimsim/reference/view_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View Default Priors — view_priors","text":"params_to_estimate Character vector specifying parameters' priors viewed. priors List priors view. NULL, default priors displayed.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/view_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View Default Priors — view_priors","text":"data frame containing details prior specified params_to_estimate.","code":""},{"path":"https://swisstph.github.io/malclimsim/reference/view_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View Default Priors — view_priors","text":"","code":"view_priors(param_inputs, proposal_matrix, params_to_estimate = c(\"a_R\", \"b_R\", \"qR\", \"z\", \"eff_SMC\", \"phi\", \"size\")) #> Error in initialize_priors(param_inputs, proposal_matrix, params_to_estimate): could not find function \"initialize_priors\""}]
