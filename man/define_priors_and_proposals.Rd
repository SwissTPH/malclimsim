% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/running_inference.R
\name{define_priors_and_proposals}
\alias{define_priors_and_proposals}
\title{Define Priors and Proposals for MCMC Parameters}
\usage{
define_priors_and_proposals(
  param_inputs,
  proposal_matrix,
  params_to_estimate,
  transform_fn,
  param_priors = NULL
)
}
\arguments{
\item{param_inputs}{A named list of initial parameter values (may include fixed and to-be-estimated parameters).}

\item{proposal_matrix}{A named matrix of proposal standard deviations (row and column names should match parameters).}

\item{params_to_estimate}{A character vector of parameter names to estimate using MCMC.}

\item{transform_fn}{A function that transforms the parameter list into model input format (typically created with \code{define_transformations()}).}

\item{param_priors}{Optional list of prior definitions. If \code{NULL}, defaults will be generated using \code{initialize_priors()}.}
}
\value{
A list with three elements:
\describe{
\item{mcmc_pars}{An MCMC parameter object created using \code{mcstate::pmcmc_parameters$new()}.}
\item{paramFix}{A named vector of parameters fixed during inference (not estimated).}
\item{param_priors}{The full list of prior definitions, either provided or generated.}
}
}
\description{
Sets up priors, proposals, and parameter fixing for MCMC estimation, including validation and transformation of parameters.
}
\details{
This function performs several validation steps:
\itemize{
\item Ensures all \code{params_to_estimate} exist in \code{param_inputs} and \code{proposal_matrix}.
\item Verifies each prior includes a \code{min}, \code{max}, and a valid density function \code{prior}.
\item Ensures transformed parameters match those to be estimated.
\item Identifies and fixes parameters in \code{param_inputs} not selected for estimation.
}
}
\examples{
\dontrun{
transform_fn <- define_transformations(...)
result <- define_priors_and_proposals(
  param_inputs = init_params,
  proposal_matrix = proposal_mat,
  params_to_estimate = c("beta", "sigma"),
  transform_fn = transform_fn
)
}

}
